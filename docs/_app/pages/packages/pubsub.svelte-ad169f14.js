import{S as e,i as n,s as r,a0 as t,a5 as s,a1 as o,a2 as a,l as i,k as u,e as h,t as c,j as p,L as b,a3 as l,d as m,n as f,c as v,a as d,g as y,m as g,X as S,b as w,a4 as P,F as $,f as E,o as N,G as j,x as T,u as k,v as D}from"../../chunks/vendor-836b274b.js";function C(e){let n,r,C,I,L,A,H,q,R,Q,W,Y,O,U,x,z,G,_,F,X,B,J,K,M,V,Z,ee,ne,re,te,se,oe,ae,ie,ue,he,ce,pe,be,le,me,fe,ve,de,ye,ge,Se,we,Pe;return z=new t({props:{language:s,code:"npm install --save @nymphjs/pubsub"}}),ne=new t({props:{language:o,code:"import SQLite3Driver from '@nymphjs/driver-sqlite3';\nimport { Nymph } from '@nymphjs/nymph';\nimport { PubSub } from '@nymphjs/pubsub';\n\nconst pubSubConfig = {\n  entries: ['ws://yourpubsubserver.tld:8080/'], // This should be set to your PubSub server URL(s).\n};\n\nconst nymph = new Nymph(\n  {},\n  new SQLite3Driver({\n    filename: ':memory:', // Put the correct driver/config here.\n  })\n);\nPubSub.initPublisher(pubSubConfig, nymph);"}}),ae=new t({props:{language:o,code:"import SQLite3Driver from '@nymphjs/driver-sqlite3';\nimport { Nymph } from '@nymphjs/nymph';\nimport createServer, { PubSub } from '@nymphjs/pubsub';\n\nconst pubSubConfig = {\n  originIsAllowed: (origin) => {\n    // Your logic to determine allowed origins goes here.\n    return true;\n  },\n  entries: ['ws://yourpubsubserver.tld:8080/'],\n};\n\nconst nymph = new Nymph(\n  {},\n  new SQLite3Driver({\n    filename: ':memory:', // Put the correct driver/config here.\n  })\n);\n// Don't forget to do this; even here!\nPubSub.initPublisher(pubSubConfig, nymph);\n\nconst pubsub = createServer(8080, pubSubConfig, nymph);"}}),pe=new t({props:{language:o,code:"import http from 'http';\nimport { server as WebSocketServer } from 'websocket';\nimport SQLite3Driver from '@nymphjs/driver-sqlite3';\nimport { Nymph } from '@nymphjs/nymph';\nimport { PubSub } from '@nymphjs/pubsub';\n\nconst pubSubConfig = {\n  originIsAllowed: (origin) => {\n    // Your logic to determine allowed origins goes here.\n    return true;\n  },\n  entries: ['ws://yourpubsubserver.tld:8080/'],\n};\n\n// Set up Nymph.\nconst nymph = new Nymph(\n  {},\n  new SQLite3Driver({\n    filename: ':memory:', // Put the correct driver/config here.\n  })\n);\n// Don't forget to do this; even here!\nPubSub.initPublisher(pubSubConfig, nymph);\n\n// Set up the PubSub server.\nconst port = 8080;\nconst server = http.createServer((_request, response) => {\n  response.writeHead(404);\n  response.end();\n});\nconst listener = server.listen(port, () => {\n  console.log(\n    new Date().toISOString(),\n    `Nymph-PubSub server started listening on port ${port}.`\n  );\n});\nconst wsServer = new WebSocketServer({\n  httpServer: listener,\n  // You should not use autoAcceptConnections for production\n  // applications, as it defeats all standard cross-origin protection\n  // facilities built into the protocol and the browser.  You should\n  // *always* verify the connection's origin and decide whether or not\n  // to accept it.\n  autoAcceptConnections: false,\n});\n\nconst pubsub = new PubSub(pubSubConfig, nymph, wsServer);"}}),{c(){n=new a,r=i(),C=u(),I=h("section"),L=h("header"),A=h("h1"),H=c("PubSub Server"),q=u(),R=h("p"),Q=c("The PubSub server provides a WebSocket server that allows Nymph to publish\n    changes and the Nymph Client to subscribe to those changes. You can\n    subscribe to individual entities, entity queries, or UIDs."),W=u(),Y=h("header"),O=h("h2"),U=c("Installation"),x=u(),p(z.$$.fragment),G=u(),_=h("header"),F=h("h2"),X=c("Usage"),B=u(),J=h("p"),K=c("Any Nymph instance will only publish changes if you initialize PubSub\n    publisher before Nymph is used! This step is "),M=h("strong"),V=c("absolutely required"),Z=c(" to have a working PubSub system."),ee=u(),p(ne.$$.fragment),re=u(),te=h("p"),se=c("Now, on your PubSub server, you can use the createServer function to create\n    a new PubSub server using HTTP (without TLS). If you want, this can be done\n    on the same server you use as a REST server, with a different port."),oe=u(),p(ae.$$.fragment),ie=u(),ue=h("p"),he=c("If you need to provide custom handling in your server (like TLS), you can\n    use the PubSub class directly and provide it a WebSocket server instance."),ce=u(),p(pe.$$.fragment),be=u(),le=h("header"),me=h("h2"),fe=c("Options"),ve=u(),de=h("p"),ye=c("See the "),ge=h("a"),Se=c("config declaration file"),we=c("."),this.h()},l(e){const t=b('[data-svelte="svelte-5j20iv"]',document.head);n=l(t),r=i(),t.forEach(m),C=f(e),I=v(e,"SECTION",{});var s=d(I);L=v(s,"HEADER",{class:!0});var o=d(L);A=v(o,"H1",{style:!0});var a=d(A);H=y(a,"PubSub Server"),a.forEach(m),o.forEach(m),q=f(s),R=v(s,"P",{});var u=d(R);Q=y(u,"The PubSub server provides a WebSocket server that allows Nymph to publish\n    changes and the Nymph Client to subscribe to those changes. You can\n    subscribe to individual entities, entity queries, or UIDs."),u.forEach(m),W=f(s),Y=v(s,"HEADER",{class:!0});var h=d(Y);O=v(h,"H2",{});var c=d(O);U=y(c,"Installation"),c.forEach(m),h.forEach(m),x=f(s),g(z.$$.fragment,s),G=f(s),_=v(s,"HEADER",{class:!0});var p=d(_);F=v(p,"H2",{});var S=d(F);X=y(S,"Usage"),S.forEach(m),p.forEach(m),B=f(s),J=v(s,"P",{});var w=d(J);K=y(w,"Any Nymph instance will only publish changes if you initialize PubSub\n    publisher before Nymph is used! This step is "),M=v(w,"STRONG",{});var P=d(M);V=y(P,"absolutely required"),P.forEach(m),Z=y(w," to have a working PubSub system."),w.forEach(m),ee=f(s),g(ne.$$.fragment,s),re=f(s),te=v(s,"P",{});var $=d(te);se=y($,"Now, on your PubSub server, you can use the createServer function to create\n    a new PubSub server using HTTP (without TLS). If you want, this can be done\n    on the same server you use as a REST server, with a different port."),$.forEach(m),oe=f(s),g(ae.$$.fragment,s),ie=f(s),ue=v(s,"P",{});var E=d(ue);he=y(E,"If you need to provide custom handling in your server (like TLS), you can\n    use the PubSub class directly and provide it a WebSocket server instance."),E.forEach(m),ce=f(s),g(pe.$$.fragment,s),be=f(s),le=v(s,"HEADER",{class:!0});var N=d(le);me=v(N,"H2",{});var j=d(me);fe=y(j,"Options"),j.forEach(m),N.forEach(m),ve=f(s),de=v(s,"P",{});var T=d(de);ye=y(T,"See the "),ge=v(T,"A",{href:!0,target:!0,rel:!0});var k=d(ge);Se=y(k,"config declaration file"),k.forEach(m),we=y(T,"."),T.forEach(m),s.forEach(m),this.h()},h(){document.title="PubSub Server - Packages - Nymph.js",n.a=r,S(A,"font-size","3em"),w(L,"class","major"),w(Y,"class","major"),w(_,"class","major"),w(le,"class","major"),w(ge,"href","https://github.com/sciactive/nymphjs/tree/master/packages/pubsub/src/conf/d.ts"),w(ge,"target","_blank"),w(ge,"rel","external")},m(e,t){n.m(P,document.head),$(document.head,r),E(e,C,t),E(e,I,t),$(I,L),$(L,A),$(A,H),$(I,q),$(I,R),$(R,Q),$(I,W),$(I,Y),$(Y,O),$(O,U),$(I,x),N(z,I,null),$(I,G),$(I,_),$(_,F),$(F,X),$(I,B),$(I,J),$(J,K),$(J,M),$(M,V),$(J,Z),$(I,ee),N(ne,I,null),$(I,re),$(I,te),$(te,se),$(I,oe),N(ae,I,null),$(I,ie),$(I,ue),$(ue,he),$(I,ce),N(pe,I,null),$(I,be),$(I,le),$(le,me),$(me,fe),$(I,ve),$(I,de),$(de,ye),$(de,ge),$(ge,Se),$(de,we),Pe=!0},p:j,i(e){Pe||(T(z.$$.fragment,e),T(ne.$$.fragment,e),T(ae.$$.fragment,e),T(pe.$$.fragment,e),Pe=!0)},o(e){k(z.$$.fragment,e),k(ne.$$.fragment,e),k(ae.$$.fragment,e),k(pe.$$.fragment,e),Pe=!1},d(e){m(r),e&&n.d(),e&&m(C),e&&m(I),D(z),D(ne),D(ae),D(pe)}}}class I extends e{constructor(e){super(),n(this,e,null,C,r,{})}}export{I as default};
