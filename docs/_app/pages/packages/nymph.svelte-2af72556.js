import{S as a,i as e,s as t,a0 as n,a1 as s,a2 as o,k as r,j as i,e as d,t as h,J as c,d as m,n as l,m as p,c as y,a as f,g as u,b as g,f as v,o as $,M as E,x as T,u as N,v as b}from"../../chunks/vendor-aa46c83e.js";import{b as w}from"../../chunks/paths-6758d194.js";import{H as D}from"../../chunks/Header-efbb9e63.js";import"../../chunks/Icon-adc01479.js";function j(a){let e;return{c(){e=h("Nymph Core")},l(a){e=u(a,"Nymph Core")},m(a,t){v(a,e,t)},d(a){a&&m(e)}}}function H(a){let e,t,H,x,S,k,q,C,P,A,L,Q,I,M,_,R,B,O,U,Y,G,J,W,z,F,K,V,X,Z,aa,ea,ta,na,sa,oa,ra,ia,da,ha,ca,ma;return t=new D({props:{$$slots:{default:[j]},$$scope:{ctx:a}}}),R=new n({props:{language:s,code:"npm install --save @nymphjs/nymph"}}),da=new n({props:{language:o,code:"// main.ts\nimport { Nymph } from '@nymphjs/nymph';\nimport MySQLDriver from '@nymphjs/driver-mysql';\nimport Todo from './Todo';\n\nconst mysqlConfig = {\n  host: 'your_db_host',\n  database: 'your_database',\n  user: 'your_user',\n  password: 'your_password',\n};\n\nNymph.init({}, new MySQLDriver(mysqlConfig));\n\n// You are set up. Now you can use entity classes like `Todo` to store data,\n// and Nymph's query methods like `getEntities` to retrieve them.\n\nasync function run() {\n  const myEntity = new Todo();\n  myEntity.text = 'Get it done!';\n  await myEntity.$save();\n\n  const otherPendingTodos = await Nymph.getEntities(\n    { class: Todo },\n    { type: '&', '!guid': myEntity.guid, equal: ['done', false] }\n  );\n\n  const total = otherPendingTodos.length;\n  const single = total === 1;\n  console.log(\n    `Besides the one I just created, there ${\n      single ? 'is' : 'are'\n    } ${total} pending todo${single ? '' : 's'} in the database.`\n  );\n}"}}),ca=new n({props:{language:o,code:"// Todo.ts\nimport { Nymph, Entity } from '@nymphjs/nymph';\n\nexport type TodoData = {\n  text: string;\n  done: boolean;\n};\n\nexport default class Todo extends Entity<TodoData> {\n  static ETYPE = 'todo'; // This is used for the table name(s) in the DB.\n  static class = 'Todo'; // This is used to map references to their class.\n\n  static async factory(guid?: string): Promise<Todo & TodoData> {\n    return (await super.factory(guid)) as Todo & TodoData;\n  }\n\n  static factorySync(guid?: string): Todo & TodoData {\n    return super.factorySync(guid) as Todo & TodoData;\n  }\n\n  constructor(guid?: string) {\n    super(guid);\n\n    if (this.guid == null) {\n      // Within the methods of an entity, you will use `this.$data` to access\n      // its data. Outside, you don't need the $data part.\n      this.$data.text = '';\n      this.$data.done = false;\n    }\n  }\n}\n\nNymph.setEntityClass(Todo.class, Todo);"}}),{c(){e=r(),i(t.$$.fragment),H=r(),x=d("section"),S=d("header"),k=d("h2"),q=h("Nymph Core"),C=r(),P=d("p"),A=h("The Nymph core provides the base level utilities to query the database, save\n    data to it, and define different data types."),L=r(),Q=d("header"),I=d("h3"),M=h("Installation"),_=r(),i(R.$$.fragment),B=r(),O=d("header"),U=d("h3"),Y=h("Drivers"),G=r(),J=d("p"),W=h("To use Nymph, you need a database driver. Nymph provides a "),z=d("a"),F=h("MySQL driver"),K=h("\n    and a "),V=d("a"),X=h("SQLite3 driver"),Z=h("."),aa=r(),ea=d("header"),ta=d("h3"),na=h("Usage"),sa=r(),oa=d("p"),ra=h("Here's an overview:"),ia=r(),i(da.$$.fragment),ha=r(),i(ca.$$.fragment),this.h()},l(a){c('[data-svelte="svelte-v8o78h"]',document.head).forEach(m),e=l(a),p(t.$$.fragment,a),H=l(a),x=y(a,"SECTION",{});var n=f(x);S=y(n,"HEADER",{class:!0});var s=f(S);k=y(s,"H2",{});var o=f(k);q=u(o,"Nymph Core"),o.forEach(m),s.forEach(m),C=l(n),P=y(n,"P",{});var r=f(P);A=u(r,"The Nymph core provides the base level utilities to query the database, save\n    data to it, and define different data types."),r.forEach(m),L=l(n),Q=y(n,"HEADER",{class:!0});var i=f(Q);I=y(i,"H3",{});var d=f(I);M=u(d,"Installation"),d.forEach(m),i.forEach(m),_=l(n),p(R.$$.fragment,n),B=l(n),O=y(n,"HEADER",{class:!0});var h=f(O);U=y(h,"H3",{});var g=f(U);Y=u(g,"Drivers"),g.forEach(m),h.forEach(m),G=l(n),J=y(n,"P",{});var v=f(J);W=u(v,"To use Nymph, you need a database driver. Nymph provides a "),z=y(v,"A",{href:!0});var $=f(z);F=u($,"MySQL driver"),$.forEach(m),K=u(v,"\n    and a "),V=y(v,"A",{href:!0});var E=f(V);X=u(E,"SQLite3 driver"),E.forEach(m),Z=u(v,"."),v.forEach(m),aa=l(n),ea=y(n,"HEADER",{class:!0});var T=f(ea);ta=y(T,"H3",{});var N=f(ta);na=u(N,"Usage"),N.forEach(m),T.forEach(m),sa=l(n),oa=y(n,"P",{});var b=f(oa);ra=u(b,"Here's an overview:"),b.forEach(m),ia=l(n),p(da.$$.fragment,n),ha=l(n),p(ca.$$.fragment,n),n.forEach(m),this.h()},h(){document.title="Nymph Core - Nymph",g(S,"class","major"),g(Q,"class","major"),g(O,"class","major"),g(z,"href",w+"/packages/driver-mysql"),g(V,"href",w+"/packages/driver-sqlite3"),g(ea,"class","major")},m(a,n){v(a,e,n),$(t,a,n),v(a,H,n),v(a,x,n),E(x,S),E(S,k),E(k,q),E(x,C),E(x,P),E(P,A),E(x,L),E(x,Q),E(Q,I),E(I,M),E(x,_),$(R,x,null),E(x,B),E(x,O),E(O,U),E(U,Y),E(x,G),E(x,J),E(J,W),E(J,z),E(z,F),E(J,K),E(J,V),E(V,X),E(J,Z),E(x,aa),E(x,ea),E(ea,ta),E(ta,na),E(x,sa),E(x,oa),E(oa,ra),E(x,ia),$(da,x,null),E(x,ha),$(ca,x,null),ma=!0},p(a,[e]){const n={};1&e&&(n.$$scope={dirty:e,ctx:a}),t.$set(n)},i(a){ma||(T(t.$$.fragment,a),T(R.$$.fragment,a),T(da.$$.fragment,a),T(ca.$$.fragment,a),ma=!0)},o(a){N(t.$$.fragment,a),N(R.$$.fragment,a),N(da.$$.fragment,a),N(ca.$$.fragment,a),ma=!1},d(a){a&&m(e),b(t,a),a&&m(H),a&&m(x),b(R),b(da),b(ca)}}}class x extends a{constructor(a){super(),e(this,a,null,H,t,{})}}export{x as default};
