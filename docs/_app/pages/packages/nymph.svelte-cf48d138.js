import{S as a,i as e,s as t,a0 as s,a5 as n,a1 as o,a2 as r,l as i,k as d,e as h,t as c,j as l,L as m,a3 as f,d as y,n as p,c as u,a as g,g as v,m as E,X as $,b as T,a4 as w,F as b,f as N,o as j,G as D,x as S,u as H,v as k}from"../../chunks/vendor-836b274b.js";import{b as P}from"../../chunks/paths-6758d194.js";function q(a){let e,t,q,x,A,L,Q,_,C,O,R,I,M,B,G,U,Y,z,F,W,X,J,K,V,Z,aa,ea,ta,sa,na,oa,ra,ia,da,ha,ca,la,ma,fa,ya,pa,ua,ga,va,Ea,$a,Ta,wa,ba,Na,ja,Da,Sa,Ha;return U=new s({props:{language:n,code:"npm install --save @nymphjs/nymph"}}),pa=new s({props:{language:o,code:"// main.ts\nimport { Nymph } from '@nymphjs/nymph';\nimport MySQLDriver from '@nymphjs/driver-mysql';\nimport Todo from './Todo';\n\nconst mysqlConfig = {\n  host: 'your_db_host',\n  database: 'your_database',\n  user: 'your_user',\n  password: 'your_password',\n};\n\nconst nymph = new Nymph({}, new MySQLDriver(mysqlConfig));\nnymph.setEntityClass(Todo.class, Todo);\n\n// You are set up. Now you can use entity classes like `Todo` to store data,\n// and Nymph's query methods like `getEntities` to retrieve them.\n\nasync function run() {\n  const myEntity = await Todo.factory();\n  myEntity.text = 'Get it done!';\n  await myEntity.$save();\n\n  const otherPendingTodos = await nymph.getEntities(\n    { class: Todo },\n    { type: '&', '!guid': myEntity.guid, equal: ['done', false] }\n  );\n\n  const total = otherPendingTodos.length;\n  const single = total === 1;\n  console.log(\n    `Besides the one I just created, there ${\n      single ? 'is' : 'are'\n    } ${total} pending todo${single ? '' : 's'} in the database.`\n  );\n}"}}),ga=new s({props:{language:o,code:"// Todo.ts\nimport { Entity } from '@nymphjs/nymph';\n\nexport type TodoData = {\n  text: string;\n  done: boolean;\n};\n\nexport default class Todo extends Entity<TodoData> {\n  static ETYPE = 'todo'; // This is used for the table name(s) in the DB.\n  static class = 'Todo'; // This is used to map references to their class.\n\n  static async factory(guid?: string): Promise<Todo & TodoData> {\n    return (await super.factory(guid)) as Todo & TodoData;\n  }\n\n  static factorySync(guid?: string): Todo & TodoData {\n    return super.factorySync(guid) as Todo & TodoData;\n  }\n\n  constructor(guid?: string) {\n    super(guid);\n\n    if (this.guid == null) {\n      // Within the methods of an entity, you will use `this.$data` to access\n      // its data. Outside, you don't need the $data part.\n      this.$data.text = '';\n      this.$data.done = false;\n    }\n  }\n\n  async $getOtherTodos() {\n    // this.$nymph (or this.nymph in a static function) is the instance of Nymph\n    // this entity was loaded with. Creating transactions will create a new\n    // instance of Nymph, so it could be a transactional instance.\n    const otherTodos = await this.$nymph.getEntities(\n      { class: Todo },\n      { type: '!&', guid: this.guid }\n    );\n    return otherTodos;\n  }\n}"}}),{c(){e=new r,t=i(),q=d(),x=h("section"),A=h("header"),L=h("h1"),Q=c("Nymph"),_=d(),C=h("p"),O=c("The Nymph core provides the base level classes and utilities to query the\n    database, save data to it, and define different data types."),R=d(),I=h("header"),M=h("h2"),B=c("Installation"),G=d(),l(U.$$.fragment),Y=d(),z=h("header"),F=h("h2"),W=c("Drivers"),X=d(),J=h("p"),K=c("To use Nymph, you need a database driver. Nymph.js provides a "),V=h("a"),Z=c("MySQL driver"),aa=c(", "),ea=h("a"),ta=c("PostgreSQL driver"),sa=c(", and a\n    "),na=h("a"),oa=c("SQLite3 driver"),ra=c("."),ia=d(),da=h("header"),ha=h("h2"),ca=c("Usage"),la=d(),ma=h("p"),fa=c("Here's an overview:"),ya=d(),l(pa.$$.fragment),ua=d(),l(ga.$$.fragment),va=d(),Ea=h("header"),$a=h("h2"),Ta=c("Options"),wa=d(),ba=h("p"),Na=c("See the "),ja=h("a"),Da=c("config declaration file"),Sa=c("."),this.h()},l(a){const s=m('[data-svelte="svelte-174dfis"]',document.head);e=f(s),t=i(),s.forEach(y),q=p(a),x=u(a,"SECTION",{});var n=g(x);A=u(n,"HEADER",{class:!0});var o=g(A);L=u(o,"H1",{style:!0});var r=g(L);Q=v(r,"Nymph"),r.forEach(y),o.forEach(y),_=p(n),C=u(n,"P",{});var d=g(C);O=v(d,"The Nymph core provides the base level classes and utilities to query the\n    database, save data to it, and define different data types."),d.forEach(y),R=p(n),I=u(n,"HEADER",{class:!0});var h=g(I);M=u(h,"H2",{});var c=g(M);B=v(c,"Installation"),c.forEach(y),h.forEach(y),G=p(n),E(U.$$.fragment,n),Y=p(n),z=u(n,"HEADER",{class:!0});var l=g(z);F=u(l,"H2",{});var $=g(F);W=v($,"Drivers"),$.forEach(y),l.forEach(y),X=p(n),J=u(n,"P",{});var T=g(J);K=v(T,"To use Nymph, you need a database driver. Nymph.js provides a "),V=u(T,"A",{href:!0});var w=g(V);Z=v(w,"MySQL driver"),w.forEach(y),aa=v(T,", "),ea=u(T,"A",{href:!0});var b=g(ea);ta=v(b,"PostgreSQL driver"),b.forEach(y),sa=v(T,", and a\n    "),na=u(T,"A",{href:!0});var N=g(na);oa=v(N,"SQLite3 driver"),N.forEach(y),ra=v(T,"."),T.forEach(y),ia=p(n),da=u(n,"HEADER",{class:!0});var j=g(da);ha=u(j,"H2",{});var D=g(ha);ca=v(D,"Usage"),D.forEach(y),j.forEach(y),la=p(n),ma=u(n,"P",{});var S=g(ma);fa=v(S,"Here's an overview:"),S.forEach(y),ya=p(n),E(pa.$$.fragment,n),ua=p(n),E(ga.$$.fragment,n),va=p(n),Ea=u(n,"HEADER",{class:!0});var H=g(Ea);$a=u(H,"H2",{});var k=g($a);Ta=v(k,"Options"),k.forEach(y),H.forEach(y),wa=p(n),ba=u(n,"P",{});var P=g(ba);Na=v(P,"See the "),ja=u(P,"A",{href:!0,target:!0,rel:!0});var Ha=g(ja);Da=v(Ha,"config declaration file"),Ha.forEach(y),Sa=v(P,"."),P.forEach(y),n.forEach(y),this.h()},h(){document.title="Nymph - Packages - Nymph",e.a=t,$(L,"font-size","3em"),T(A,"class","major"),T(I,"class","major"),T(z,"class","major"),T(V,"href",P+"/packages/driver-mysql"),T(ea,"href",P+"/packages/driver-postgresql"),T(na,"href",P+"/packages/driver-sqlite3"),T(da,"class","major"),T(Ea,"class","major"),T(ja,"href","https://github.com/sciactive/nymphjs/tree/master/packages/nymph/src/conf/d.ts"),T(ja,"target","_blank"),T(ja,"rel","external")},m(a,s){e.m(w,document.head),b(document.head,t),N(a,q,s),N(a,x,s),b(x,A),b(A,L),b(L,Q),b(x,_),b(x,C),b(C,O),b(x,R),b(x,I),b(I,M),b(M,B),b(x,G),j(U,x,null),b(x,Y),b(x,z),b(z,F),b(F,W),b(x,X),b(x,J),b(J,K),b(J,V),b(V,Z),b(J,aa),b(J,ea),b(ea,ta),b(J,sa),b(J,na),b(na,oa),b(J,ra),b(x,ia),b(x,da),b(da,ha),b(ha,ca),b(x,la),b(x,ma),b(ma,fa),b(x,ya),j(pa,x,null),b(x,ua),j(ga,x,null),b(x,va),b(x,Ea),b(Ea,$a),b($a,Ta),b(x,wa),b(x,ba),b(ba,Na),b(ba,ja),b(ja,Da),b(ba,Sa),Ha=!0},p:D,i(a){Ha||(S(U.$$.fragment,a),S(pa.$$.fragment,a),S(ga.$$.fragment,a),Ha=!0)},o(a){H(U.$$.fragment,a),H(pa.$$.fragment,a),H(ga.$$.fragment,a),Ha=!1},d(a){y(t),a&&e.d(),a&&y(q),a&&y(x),k(U),k(pa),k(ga)}}}class x extends a{constructor(a){super(),e(this,a,null,q,t,{})}}export{x as default};
