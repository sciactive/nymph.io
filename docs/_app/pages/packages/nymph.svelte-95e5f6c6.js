import{S as a,i as e,s as t,a0 as s,a5 as n,a1 as o,a2 as r,l as i,k as d,e as h,t as c,j as l,L as m,a3 as f,d as p,n as y,c as u,a as g,g as v,m as E,X as $,b as T,a4 as w,F as b,f as D,o as j,G as N,x as k,u as S,v as A}from"../../chunks/vendor-836b274b.js";import{b as H}from"../../chunks/paths-6758d194.js";function P(a){let e,t,P,q,x,L,Q,C,R,M,_,O,I,B,G,U,Y,z,F,W,X,J,K,V,Z,aa,ea,ta,sa,na,oa,ra,ia,da,ha,ca,la,ma,fa,pa,ya,ua,ga,va,Ea,$a,Ta,wa,ba,Da,ja,Na,ka,Sa,Aa,Ha,Pa,qa,xa,La;return J=new s({props:{language:n,code:"npm install --save @nymphjs/nymph"}}),Ta=new s({props:{language:o,code:"// main.ts\nimport { Nymph } from '@nymphjs/nymph';\nimport MySQLDriver from '@nymphjs/driver-mysql';\nimport Todo from './Todo';\n\nconst mysqlConfig = {\n  host: 'your_db_host',\n  database: 'your_database',\n  user: 'your_user',\n  password: 'your_password',\n};\n\nconst nymph = new Nymph({}, new MySQLDriver(mysqlConfig));\nnymph.setEntityClass(Todo.class, Todo);\n\n// You are set up. Now you can use entity classes like `Todo` to store data,\n// and Nymph's query methods like `getEntities` to retrieve them.\n\nasync function run() {\n  const myEntity = await Todo.factory();\n  myEntity.text = 'Get it done!';\n  await myEntity.$save();\n\n  const otherPendingTodos = await nymph.getEntities(\n    { class: Todo },\n    { type: '&', '!guid': myEntity.guid, equal: ['done', false] }\n  );\n\n  const total = otherPendingTodos.length;\n  const single = total === 1;\n  console.log(\n    `Besides the one I just created, there ${\n      single ? 'is' : 'are'\n    } ${total} pending todo${single ? '' : 's'} in the database.`\n  );\n}"}}),ba=new s({props:{language:o,code:"// Todo.ts\nimport { Entity } from '@nymphjs/nymph';\n\nexport type TodoData = {\n  text: string;\n  done: boolean;\n};\n\nexport default class Todo extends Entity<TodoData> {\n  static ETYPE = 'todo'; // This is used for the table name(s) in the DB.\n  static class = 'Todo'; // This is used to map references to their class.\n\n  static async factory(guid?: string): Promise<Todo & TodoData> {\n    return (await super.factory(guid)) as Todo & TodoData;\n  }\n\n  static factorySync(guid?: string): Todo & TodoData {\n    return super.factorySync(guid) as Todo & TodoData;\n  }\n\n  constructor(guid?: string) {\n    super(guid);\n\n    if (this.guid == null) {\n      // Within the methods of an entity, you will use `this.$data` to access\n      // its data. Outside, you don't need the $data part.\n      this.$data.text = '';\n      this.$data.done = false;\n    }\n  }\n\n  async $getOtherTodos() {\n    // this.$nymph (or this.nymph in a static function) is the instance of Nymph\n    // this entity was loaded with. Creating transactions will create a new\n    // instance of Nymph, so it could be a transactional instance.\n    const otherTodos = await this.$nymph.getEntities(\n      { class: Todo },\n      { type: '!&', guid: this.guid }\n    );\n    return otherTodos;\n  }\n}"}}),{c(){e=new r,t=i(),P=d(),q=h("section"),x=h("header"),L=h("h1"),Q=c("Nymph"),C=d(),R=h("p"),M=c("Check out the "),_=h("a"),O=c("README"),I=c("."),B=d(),G=h("p"),U=c("The Nymph core provides the base level classes and utilities to query the\n    database, save data to it, and define different data types."),Y=d(),z=h("header"),F=h("h2"),W=c("Installation"),X=d(),l(J.$$.fragment),K=d(),V=h("header"),Z=h("h2"),aa=c("Drivers"),ea=d(),ta=h("p"),sa=c("To use Nymph, you need a database driver. Nymph.js provides a "),na=h("a"),oa=c("MySQL driver"),ra=c(", "),ia=h("a"),da=c("PostgreSQL driver"),ha=c(", and a\n    "),ca=h("a"),la=c("SQLite3 driver"),ma=c("."),fa=d(),pa=h("header"),ya=h("h2"),ua=c("Usage"),ga=d(),va=h("p"),Ea=c("Here's an overview:"),$a=d(),l(Ta.$$.fragment),wa=d(),l(ba.$$.fragment),Da=d(),ja=h("header"),Na=h("h2"),ka=c("Options"),Sa=d(),Aa=h("p"),Ha=c("See the "),Pa=h("a"),qa=c("config declaration file"),xa=c("."),this.h()},l(a){const s=m('[data-svelte="svelte-174dfis"]',document.head);e=f(s),t=i(),s.forEach(p),P=y(a),q=u(a,"SECTION",{});var n=g(q);x=u(n,"HEADER",{class:!0});var o=g(x);L=u(o,"H1",{style:!0});var r=g(L);Q=v(r,"Nymph"),r.forEach(p),C=y(o),R=u(o,"P",{});var d=g(R);M=v(d,"Check out the "),_=u(d,"A",{href:!0});var h=g(_);O=v(h,"README"),h.forEach(p),I=v(d,"."),d.forEach(p),o.forEach(p),B=y(n),G=u(n,"P",{});var c=g(G);U=v(c,"The Nymph core provides the base level classes and utilities to query the\n    database, save data to it, and define different data types."),c.forEach(p),Y=y(n),z=u(n,"HEADER",{class:!0});var l=g(z);F=u(l,"H2",{});var $=g(F);W=v($,"Installation"),$.forEach(p),l.forEach(p),X=y(n),E(J.$$.fragment,n),K=y(n),V=u(n,"HEADER",{class:!0});var T=g(V);Z=u(T,"H2",{});var w=g(Z);aa=v(w,"Drivers"),w.forEach(p),T.forEach(p),ea=y(n),ta=u(n,"P",{});var b=g(ta);sa=v(b,"To use Nymph, you need a database driver. Nymph.js provides a "),na=u(b,"A",{href:!0});var D=g(na);oa=v(D,"MySQL driver"),D.forEach(p),ra=v(b,", "),ia=u(b,"A",{href:!0});var j=g(ia);da=v(j,"PostgreSQL driver"),j.forEach(p),ha=v(b,", and a\n    "),ca=u(b,"A",{href:!0});var N=g(ca);la=v(N,"SQLite3 driver"),N.forEach(p),ma=v(b,"."),b.forEach(p),fa=y(n),pa=u(n,"HEADER",{class:!0});var k=g(pa);ya=u(k,"H2",{});var S=g(ya);ua=v(S,"Usage"),S.forEach(p),k.forEach(p),ga=y(n),va=u(n,"P",{});var A=g(va);Ea=v(A,"Here's an overview:"),A.forEach(p),$a=y(n),E(Ta.$$.fragment,n),wa=y(n),E(ba.$$.fragment,n),Da=y(n),ja=u(n,"HEADER",{class:!0});var H=g(ja);Na=u(H,"H2",{});var La=g(Na);ka=v(La,"Options"),La.forEach(p),H.forEach(p),Sa=y(n),Aa=u(n,"P",{});var Qa=g(Aa);Ha=v(Qa,"See the "),Pa=u(Qa,"A",{href:!0,target:!0,rel:!0});var Ca=g(Pa);qa=v(Ca,"config declaration file"),Ca.forEach(p),xa=v(Qa,"."),Qa.forEach(p),n.forEach(p),this.h()},h(){document.title="Nymph - Packages - Nymph",e.a=t,$(L,"font-size","3em"),T(_,"href","https://github.com/sciactive/nymphjs/tree/master/packages/nymph#readme"),T(x,"class","major"),T(z,"class","major"),T(V,"class","major"),T(na,"href",H+"/packages/driver-mysql"),T(ia,"href",H+"/packages/driver-postgresql"),T(ca,"href",H+"/packages/driver-sqlite3"),T(pa,"class","major"),T(ja,"class","major"),T(Pa,"href","https://github.com/sciactive/nymphjs/tree/master/packages/nymph/src/conf/d.ts"),T(Pa,"target","_blank"),T(Pa,"rel","external")},m(a,s){e.m(w,document.head),b(document.head,t),D(a,P,s),D(a,q,s),b(q,x),b(x,L),b(L,Q),b(x,C),b(x,R),b(R,M),b(R,_),b(_,O),b(R,I),b(q,B),b(q,G),b(G,U),b(q,Y),b(q,z),b(z,F),b(F,W),b(q,X),j(J,q,null),b(q,K),b(q,V),b(V,Z),b(Z,aa),b(q,ea),b(q,ta),b(ta,sa),b(ta,na),b(na,oa),b(ta,ra),b(ta,ia),b(ia,da),b(ta,ha),b(ta,ca),b(ca,la),b(ta,ma),b(q,fa),b(q,pa),b(pa,ya),b(ya,ua),b(q,ga),b(q,va),b(va,Ea),b(q,$a),j(Ta,q,null),b(q,wa),j(ba,q,null),b(q,Da),b(q,ja),b(ja,Na),b(Na,ka),b(q,Sa),b(q,Aa),b(Aa,Ha),b(Aa,Pa),b(Pa,qa),b(Aa,xa),La=!0},p:N,i(a){La||(k(J.$$.fragment,a),k(Ta.$$.fragment,a),k(ba.$$.fragment,a),La=!0)},o(a){S(J.$$.fragment,a),S(Ta.$$.fragment,a),S(ba.$$.fragment,a),La=!1},d(a){p(t),a&&e.d(),a&&p(P),a&&p(q),A(J),A(Ta),A(ba)}}}class q extends a{constructor(a){super(),e(this,a,null,P,t,{})}}export{q as default};
