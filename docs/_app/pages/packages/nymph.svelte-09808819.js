import{S as a,i as e,s as t,a0 as s,a5 as n,a1 as o,a2 as r,l as i,k as d,e as h,t as c,j as l,L as m,a3 as f,d as p,n as y,c as u,a as g,g as v,m as E,X as $,b as T,a4 as b,F as N,f as D,o as w,G as j,x as H,u as S,v as k}from"../../chunks/vendor-836b274b.js";import{b as x}from"../../chunks/paths-6758d194.js";function q(a){let e,t,q,P,A,L,Q,_,R,C,I,M,O,B,G,U,Y,z,F,W,X,J,K,V,Z,aa,ea,ta,sa,na,oa,ra,ia,da,ha,ca,la,ma,fa,pa,ya,ua,ga,va,Ea,$a,Ta,ba,Na,Da,wa;return U=new s({props:{language:n,code:"npm install --save @nymphjs/nymph"}}),ma=new s({props:{language:o,code:"// main.ts\nimport { Nymph } from '@nymphjs/nymph';\nimport MySQLDriver from '@nymphjs/driver-mysql';\nimport Todo from './Todo';\n\nconst mysqlConfig = {\n  host: 'your_db_host',\n  database: 'your_database',\n  user: 'your_user',\n  password: 'your_password',\n};\n\nNymph.init({}, new MySQLDriver(mysqlConfig));\n\n// You are set up. Now you can use entity classes like `Todo` to store data,\n// and Nymph's query methods like `getEntities` to retrieve them.\n\nasync function run() {\n  const myEntity = new Todo();\n  myEntity.text = 'Get it done!';\n  await myEntity.$save();\n\n  const otherPendingTodos = await Nymph.getEntities(\n    { class: Todo },\n    { type: '&', '!guid': myEntity.guid, equal: ['done', false] }\n  );\n\n  const total = otherPendingTodos.length;\n  const single = total === 1;\n  console.log(\n    `Besides the one I just created, there ${\n      single ? 'is' : 'are'\n    } ${total} pending todo${single ? '' : 's'} in the database.`\n  );\n}"}}),pa=new s({props:{language:o,code:"// Todo.ts\nimport { Nymph, Entity } from '@nymphjs/nymph';\n\nexport type TodoData = {\n  text: string;\n  done: boolean;\n};\n\nexport default class Todo extends Entity<TodoData> {\n  static ETYPE = 'todo'; // This is used for the table name(s) in the DB.\n  static class = 'Todo'; // This is used to map references to their class.\n\n  static async factory(guid?: string): Promise<Todo & TodoData> {\n    return (await super.factory(guid)) as Todo & TodoData;\n  }\n\n  static factorySync(guid?: string): Todo & TodoData {\n    return super.factorySync(guid) as Todo & TodoData;\n  }\n\n  constructor(guid?: string) {\n    super(guid);\n\n    if (this.guid == null) {\n      // Within the methods of an entity, you will use `this.$data` to access\n      // its data. Outside, you don't need the $data part.\n      this.$data.text = '';\n      this.$data.done = false;\n    }\n  }\n}\n\nNymph.setEntityClass(Todo.class, Todo);"}}),{c(){e=new r,t=i(),q=d(),P=h("section"),A=h("header"),L=h("h1"),Q=c("Nymph"),_=d(),R=h("p"),C=c("The Nymph core provides the base level classes and utilities to query the\n    database, save data to it, and define different data types."),I=d(),M=h("header"),O=h("h2"),B=c("Installation"),G=d(),l(U.$$.fragment),Y=d(),z=h("header"),F=h("h2"),W=c("Drivers"),X=d(),J=h("p"),K=c("To use Nymph, you need a database driver. Nymph provides a "),V=h("a"),Z=c("MySQL driver"),aa=c("\n    and a "),ea=h("a"),ta=c("SQLite3 driver"),sa=c("."),na=d(),oa=h("header"),ra=h("h2"),ia=c("Usage"),da=d(),ha=h("p"),ca=c("Here's an overview:"),la=d(),l(ma.$$.fragment),fa=d(),l(pa.$$.fragment),ya=d(),ua=h("header"),ga=h("h2"),va=c("Options"),Ea=d(),$a=h("p"),Ta=c("See the "),ba=h("a"),Na=c("config declaration file"),Da=c("."),this.h()},l(a){const s=m('[data-svelte="svelte-174dfis"]',document.head);e=f(s),t=i(),s.forEach(p),q=y(a),P=u(a,"SECTION",{});var n=g(P);A=u(n,"HEADER",{class:!0});var o=g(A);L=u(o,"H1",{style:!0});var r=g(L);Q=v(r,"Nymph"),r.forEach(p),o.forEach(p),_=y(n),R=u(n,"P",{});var d=g(R);C=v(d,"The Nymph core provides the base level classes and utilities to query the\n    database, save data to it, and define different data types."),d.forEach(p),I=y(n),M=u(n,"HEADER",{class:!0});var h=g(M);O=u(h,"H2",{});var c=g(O);B=v(c,"Installation"),c.forEach(p),h.forEach(p),G=y(n),E(U.$$.fragment,n),Y=y(n),z=u(n,"HEADER",{class:!0});var l=g(z);F=u(l,"H2",{});var $=g(F);W=v($,"Drivers"),$.forEach(p),l.forEach(p),X=y(n),J=u(n,"P",{});var T=g(J);K=v(T,"To use Nymph, you need a database driver. Nymph provides a "),V=u(T,"A",{href:!0});var b=g(V);Z=v(b,"MySQL driver"),b.forEach(p),aa=v(T,"\n    and a "),ea=u(T,"A",{href:!0});var N=g(ea);ta=v(N,"SQLite3 driver"),N.forEach(p),sa=v(T,"."),T.forEach(p),na=y(n),oa=u(n,"HEADER",{class:!0});var D=g(oa);ra=u(D,"H2",{});var w=g(ra);ia=v(w,"Usage"),w.forEach(p),D.forEach(p),da=y(n),ha=u(n,"P",{});var j=g(ha);ca=v(j,"Here's an overview:"),j.forEach(p),la=y(n),E(ma.$$.fragment,n),fa=y(n),E(pa.$$.fragment,n),ya=y(n),ua=u(n,"HEADER",{class:!0});var H=g(ua);ga=u(H,"H2",{});var S=g(ga);va=v(S,"Options"),S.forEach(p),H.forEach(p),Ea=y(n),$a=u(n,"P",{});var k=g($a);Ta=v(k,"See the "),ba=u(k,"A",{href:!0,target:!0,rel:!0});var x=g(ba);Na=v(x,"config declaration file"),x.forEach(p),Da=v(k,"."),k.forEach(p),n.forEach(p),this.h()},h(){document.title="Nymph - Packages - Nymph",e.a=t,$(L,"font-size","3em"),T(A,"class","major"),T(M,"class","major"),T(z,"class","major"),T(V,"href",x+"/packages/driver-mysql"),T(ea,"href",x+"/packages/driver-sqlite3"),T(oa,"class","major"),T(ua,"class","major"),T(ba,"href","https://github.com/sciactive/nymphjs/tree/master/packages/nymph/src/conf/d.ts"),T(ba,"target","_blank"),T(ba,"rel","external")},m(a,s){e.m(b,document.head),N(document.head,t),D(a,q,s),D(a,P,s),N(P,A),N(A,L),N(L,Q),N(P,_),N(P,R),N(R,C),N(P,I),N(P,M),N(M,O),N(O,B),N(P,G),w(U,P,null),N(P,Y),N(P,z),N(z,F),N(F,W),N(P,X),N(P,J),N(J,K),N(J,V),N(V,Z),N(J,aa),N(J,ea),N(ea,ta),N(J,sa),N(P,na),N(P,oa),N(oa,ra),N(ra,ia),N(P,da),N(P,ha),N(ha,ca),N(P,la),w(ma,P,null),N(P,fa),w(pa,P,null),N(P,ya),N(P,ua),N(ua,ga),N(ga,va),N(P,Ea),N(P,$a),N($a,Ta),N($a,ba),N(ba,Na),N($a,Da),wa=!0},p:j,i(a){wa||(H(U.$$.fragment,a),H(ma.$$.fragment,a),H(pa.$$.fragment,a),wa=!0)},o(a){S(U.$$.fragment,a),S(ma.$$.fragment,a),S(pa.$$.fragment,a),wa=!1},d(a){p(t),a&&e.d(),a&&p(q),a&&p(P),k(U),k(ma),k(pa)}}}class P extends a{constructor(a){super(),e(this,a,null,q,t,{})}}export{P as default};
