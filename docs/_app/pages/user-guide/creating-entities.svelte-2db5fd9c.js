import{S as e,i as t,s as n,a0 as a,a1 as s,a2 as i,l as o,k as r,e as c,t as l,j as h,L as d,a3 as f,d as y,n as g,c as u,a as p,g as v,m,X as E,b as w,a4 as $,F as b,f as I,o as D,G as k,x as T,u as P,v as C}from"../../chunks/vendor-836b274b.js";function N(e){let t,n,N,S,j,O,G,W,R,B,U,x,A,q,V,Y,z,F,H,M,L,X,J,K,Q,Z,_,ee,te,ne,ae,se,ie,oe,re,ce,le,he,de,fe,ye,ge,ue,pe,ve,me,Ee,we,$e,be,Ie,De,ke,Te,Pe,Ce,Ne,Se,je,Oe,Ge,We,Re,Be,Ue,xe;return L=new a({props:{language:s,code:'// BlogPost extends the Entity class.\nlet blogPost = await BlogPost.factory();\n\n// Check that the entity is new.\nif (someBlogPost.guid == null) {\n  alert("This blog post hasn\'t been saved yet!");\n}'}}),Z=new a({props:{language:s,code:"blogPost.$addTag('super-post');\nawait blogPost.$save();\n\nlet superPosts = await Nymph.getEntities(\n  { class: BlogPost.class },\n  { type: '&', tag: 'super-post' }\n);\n\nblogPost.$inArray(superPosts); // true"}}),he=new a({props:{language:s,code:"let entity = await Entity.factory();\nentity.foo = await Entity.factory();\n\nentity.foo.bar = 'It works!';\nawait entity.foo.$save(); // Saving the referenced entity first! :)\nawait entity.$save(); // now foo has been saved.\n\nconst guid = entity->guid;\nentity = await Entity.factory(guid);\n\nentity.foo.guid == null; // False\nconsole.log(entity.foo.bar); // Outputs 'It works!'."}}),Ee=new a({props:{language:s,code:"let entity = await Entity.factory();\nentity.foo = await Entity.factory();\n\nawait entity.$save(); // foo hasn't been saved yet!\n\nentity.foo.bar = 'It works!';\nawait entity.foo.$save();\n\nconst guid = entity->guid;\nentity = await Entity.factory(guid);\n\nentity.foo.guid == null; // True\nconsole.log(entity.foo.bar); // Outputs undefined."}}),{c(){t=new i,n=o(),N=r(),S=c("section"),j=c("header"),O=c("h1"),G=l("Creating Entities"),W=r(),R=c("p"),B=l("To create or retrieve an entity, you can call the "),U=c("code"),x=l("factory"),A=l("\n    static method of an entity's class and pass in an optional GUID. You can also\n    use the "),q=c("code"),V=l("factorySync"),Y=l(" method if you need to create a new entity\n    synchronously. The benefit of using the factory method is that it can return\n    the correct type in TypeScript. To check that an entity hasn't been saved\n    yet, check that the GUID is null ("),z=c("code"),F=l("entity.guid == null"),H=l(")."),M=r(),h(L.$$.fragment),X=r(),J=c("p"),K=l("Much like entries in many blogging systems, entities can be organized using\n    tags. The tags provide a fast way to query entities."),Q=r(),h(Z.$$.fragment),_=r(),ee=c("p"),te=l("Be cautious when saving an entity in another entity's property. If the\n    referenced entity is newly created and does not have a GUID, Nymph will not\n    be able to retrieve it later. Always save the referenced entity first."),ne=r(),ae=c("div"),se=c("div"),ie=l("Saving a Referenced Entity the "),oe=c("strong"),re=l("Right"),ce=l(" Way"),le=r(),h(he.$$.fragment),de=r(),fe=c("div"),ye=c("div"),ge=l("Saving a Referenced Entity the "),ue=c("strong"),pe=l("Wrong"),ve=l(" Way"),me=r(),h(Ee.$$.fragment),we=r(),$e=c("p"),be=l("Caution: Since the referenced entity's class name is stored in the reference\n    on the parent entity, if you change the class name in an update, you need to\n    reassign all referenced entities of that class and resave."),Ie=r(),De=c("p"),ke=l('When an entity is loaded, it does not request its referenced entities from\n    Nymph. Instead, it creates instances without data called "sleeping\n    references". When you first access an entity\'s data (in Node.js), if it is a\n    sleeping reference, it will fill its data from the DB. You can call\n    '),Te=c("code"),Pe=l("$clearCache"),Ce=l(" in Node.js or "),Ne=c("code"),Se=l("$refresh"),je=l(" in the client to\n    turn all the entities back into sleeping references."),Oe=r(),Ge=c("p"),We=l("In the client, the "),Re=c("code"),Be=l("$readyAll"),Ue=l(" method can be used to awaken all sleeping\n    references in the entity's data. This is the most convenient way to do this,\n    since, unlike in Node.js, the sleeping reference can't just be loaded when it\n    is first accessed."),this.h()},l(e){const a=d('[data-svelte="svelte-1vd957s"]',document.head);t=f(a),n=o(),a.forEach(y),N=g(e),S=u(e,"SECTION",{});var s=p(S);j=u(s,"HEADER",{class:!0});var i=p(j);O=u(i,"H1",{style:!0});var r=p(O);G=v(r,"Creating Entities"),r.forEach(y),i.forEach(y),W=g(s),R=u(s,"P",{});var c=p(R);B=v(c,"To create or retrieve an entity, you can call the "),U=u(c,"CODE",{});var l=p(U);x=v(l,"factory"),l.forEach(y),A=v(c,"\n    static method of an entity's class and pass in an optional GUID. You can also\n    use the "),q=u(c,"CODE",{});var h=p(q);V=v(h,"factorySync"),h.forEach(y),Y=v(c," method if you need to create a new entity\n    synchronously. The benefit of using the factory method is that it can return\n    the correct type in TypeScript. To check that an entity hasn't been saved\n    yet, check that the GUID is null ("),z=u(c,"CODE",{});var E=p(z);F=v(E,"entity.guid == null"),E.forEach(y),H=v(c,")."),c.forEach(y),M=g(s),m(L.$$.fragment,s),X=g(s),J=u(s,"P",{});var w=p(J);K=v(w,"Much like entries in many blogging systems, entities can be organized using\n    tags. The tags provide a fast way to query entities."),w.forEach(y),Q=g(s),m(Z.$$.fragment,s),_=g(s),ee=u(s,"P",{});var $=p(ee);te=v($,"Be cautious when saving an entity in another entity's property. If the\n    referenced entity is newly created and does not have a GUID, Nymph will not\n    be able to retrieve it later. Always save the referenced entity first."),$.forEach(y),ne=g(s),ae=u(s,"DIV",{});var b=p(ae);se=u(b,"DIV",{style:!0});var I=p(se);ie=v(I,"Saving a Referenced Entity the "),oe=u(I,"STRONG",{});var D=p(oe);re=v(D,"Right"),D.forEach(y),ce=v(I," Way"),I.forEach(y),le=g(b),m(he.$$.fragment,b),b.forEach(y),de=g(s),fe=u(s,"DIV",{});var k=p(fe);ye=u(k,"DIV",{style:!0});var T=p(ye);ge=v(T,"Saving a Referenced Entity the "),ue=u(T,"STRONG",{});var P=p(ue);pe=v(P,"Wrong"),P.forEach(y),ve=v(T," Way"),T.forEach(y),me=g(k),m(Ee.$$.fragment,k),k.forEach(y),we=g(s),$e=u(s,"P",{});var C=p($e);be=v(C,"Caution: Since the referenced entity's class name is stored in the reference\n    on the parent entity, if you change the class name in an update, you need to\n    reassign all referenced entities of that class and resave."),C.forEach(y),Ie=g(s),De=u(s,"P",{});var xe=p(De);ke=v(xe,'When an entity is loaded, it does not request its referenced entities from\n    Nymph. Instead, it creates instances without data called "sleeping\n    references". When you first access an entity\'s data (in Node.js), if it is a\n    sleeping reference, it will fill its data from the DB. You can call\n    '),Te=u(xe,"CODE",{});var Ae=p(Te);Pe=v(Ae,"$clearCache"),Ae.forEach(y),Ce=v(xe," in Node.js or "),Ne=u(xe,"CODE",{});var qe=p(Ne);Se=v(qe,"$refresh"),qe.forEach(y),je=v(xe," in the client to\n    turn all the entities back into sleeping references."),xe.forEach(y),Oe=g(s),Ge=u(s,"P",{});var Ve=p(Ge);We=v(Ve,"In the client, the "),Re=u(Ve,"CODE",{});var Ye=p(Re);Be=v(Ye,"$readyAll"),Ye.forEach(y),Ue=v(Ve," method can be used to awaken all sleeping\n    references in the entity's data. This is the most convenient way to do this,\n    since, unlike in Node.js, the sleeping reference can't just be loaded when it\n    is first accessed."),Ve.forEach(y),s.forEach(y),this.h()},h(){document.title="Creating Entities - User Guide - Nymph",t.a=n,E(O,"font-size","3em"),w(j,"class","major"),E(se,"text-align","end"),E(ye,"text-align","end")},m(e,a){t.m($,document.head),b(document.head,n),I(e,N,a),I(e,S,a),b(S,j),b(j,O),b(O,G),b(S,W),b(S,R),b(R,B),b(R,U),b(U,x),b(R,A),b(R,q),b(q,V),b(R,Y),b(R,z),b(z,F),b(R,H),b(S,M),D(L,S,null),b(S,X),b(S,J),b(J,K),b(S,Q),D(Z,S,null),b(S,_),b(S,ee),b(ee,te),b(S,ne),b(S,ae),b(ae,se),b(se,ie),b(se,oe),b(oe,re),b(se,ce),b(ae,le),D(he,ae,null),b(S,de),b(S,fe),b(fe,ye),b(ye,ge),b(ye,ue),b(ue,pe),b(ye,ve),b(fe,me),D(Ee,fe,null),b(S,we),b(S,$e),b($e,be),b(S,Ie),b(S,De),b(De,ke),b(De,Te),b(Te,Pe),b(De,Ce),b(De,Ne),b(Ne,Se),b(De,je),b(S,Oe),b(S,Ge),b(Ge,We),b(Ge,Re),b(Re,Be),b(Ge,Ue),xe=!0},p:k,i(e){xe||(T(L.$$.fragment,e),T(Z.$$.fragment,e),T(he.$$.fragment,e),T(Ee.$$.fragment,e),xe=!0)},o(e){P(L.$$.fragment,e),P(Z.$$.fragment,e),P(he.$$.fragment,e),P(Ee.$$.fragment,e),xe=!1},d(e){y(n),e&&t.d(),e&&y(N),e&&y(S),C(L),C(Z),C(he),C(Ee)}}}class S extends e{constructor(e){super(),t(this,e,null,N,n,{})}}export{S as default};
