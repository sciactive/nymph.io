import{S as e,i as a,s as n,a0 as s,a1 as t,a2 as o,l as i,k as r,e as u,t as c,j as l,L as h,a3 as d,d as f,n as I,c as m,a as D,g as v,m as y,X as U,b as g,a4 as E,F as w,f as p,o as b,G as q,x as k,u as T,v as C}from"../../chunks/vendor-836b274b.js";import{b as N}from"../../chunks/paths-6758d194.js";function j(e){let a,n,j,P,S,O,$,G,L,x,Y,A,R,V,H,z,B,F,X,J,K,M,Q,W,Z,_,ee,ae,ne,se,te,oe,ie,re,ue,ce,le,he,de,fe,Ie,me,De,ve,ye,Ue,ge,Ee,we,pe,be,qe,ke,Te,Ce,Ne,je,Pe,Se,Oe,$e,Ge,Le,xe;return Ie=new s({props:{language:t,code:"let entity = await Post.factory();\n\nentity.id = await nymph.newUID('Blog/Post');\nawait entity.$save();"}}),{c(){a=new o,n=i(),j=r(),P=u("section"),S=u("header"),O=u("h1"),$=c("UIDs"),G=r(),L=u("p"),x=c("UIDs, or unique IDs, provide an easier way for users to identify entities.\n    UIDs are just sequential numbers and can be used for anything you like, not\n    just entities. As opposed to a GUID, which is a unique ID for all entities,\n    a UID is only unique for its own sequence. Therefore, they are more visually\n    appealing to be used as an ID. (Think Sale #615 vs Sale\n    #790219d8fb67a1357707b71d.)"),Y=r(),A=u("p"),R=c("Nymph has the following methods for handling UIDs:"),V=r(),H=u("ul"),z=u("li"),B=u("code"),F=c("deleteUID"),X=c(" - Delete a unique ID from the system."),J=r(),K=u("li"),M=u("code"),Q=c("getUID"),W=c(" - Get the current value of a unique ID."),Z=r(),_=u("li"),ee=u("code"),ae=c("newUID"),ne=c(" - Increment or create a unique ID and return the new value."),se=r(),te=u("li"),oe=u("code"),ie=c("renameUID"),re=c(" - Rename a unique ID."),ue=r(),ce=u("li"),le=u("code"),he=c("setUID"),de=c(" - Set the value of a unique ID."),fe=r(),l(Ie.$$.fragment),me=r(),De=u("p"),ve=c('You probably don\'t want to allow any UIDs from the client. Then a malicious\n    user can mess with the UID. Instead, from the server side, you can create a\n    UID when the entity is saved. You can also gate UIDs using abilities like\n    "uid/get/nameofuid", "uid/new/nameofuid", and "uid/set/nameofuid". These\n    abilities are '),ye=u("strong"),Ue=c("only"),ge=c(" checked for client queries. If you're\n    using UIDs from Node.js and want to gate them, use the\n    "),Ee=u("code"),we=c("checkClientUIDPermissions"),pe=c(" method on Tilmeld."),be=r(),qe=u("p"),ke=c("Caution: If a UID is incremented, and the entity you're using it on can't be\n    saved, there is no safe way to decrement the UID back to its previous value.\n    Therefore, you're advised to not use UIDs within transactions. (You can use\n    your top-level instance of Nymph to make a query outside of your\n    transaction.)"),Te=r(),Ce=u("section"),Ne=u("div"),je=u("div"),Pe=u("a"),Se=c("Previous: Defining Entities"),Oe=r(),$e=u("div"),Ge=u("a"),Le=c("Next: Transactions"),this.h()},l(e){const s=h('[data-svelte="svelte-qnlra6"]',document.head);a=d(s),n=i(),s.forEach(f),j=I(e),P=m(e,"SECTION",{});var t=D(P);S=m(t,"HEADER",{class:!0});var o=D(S);O=m(o,"H1",{style:!0});var r=D(O);$=v(r,"UIDs"),r.forEach(f),o.forEach(f),G=I(t),L=m(t,"P",{});var u=D(L);x=v(u,"UIDs, or unique IDs, provide an easier way for users to identify entities.\n    UIDs are just sequential numbers and can be used for anything you like, not\n    just entities. As opposed to a GUID, which is a unique ID for all entities,\n    a UID is only unique for its own sequence. Therefore, they are more visually\n    appealing to be used as an ID. (Think Sale #615 vs Sale\n    #790219d8fb67a1357707b71d.)"),u.forEach(f),Y=I(t),A=m(t,"P",{});var c=D(A);R=v(c,"Nymph has the following methods for handling UIDs:"),c.forEach(f),V=I(t),H=m(t,"UL",{});var l=D(H);z=m(l,"LI",{});var U=D(z);B=m(U,"CODE",{});var g=D(B);F=v(g,"deleteUID"),g.forEach(f),X=v(U," - Delete a unique ID from the system."),U.forEach(f),J=I(l),K=m(l,"LI",{});var E=D(K);M=m(E,"CODE",{});var w=D(M);Q=v(w,"getUID"),w.forEach(f),W=v(E," - Get the current value of a unique ID."),E.forEach(f),Z=I(l),_=m(l,"LI",{});var p=D(_);ee=m(p,"CODE",{});var b=D(ee);ae=v(b,"newUID"),b.forEach(f),ne=v(p," - Increment or create a unique ID and return the new value."),p.forEach(f),se=I(l),te=m(l,"LI",{});var q=D(te);oe=m(q,"CODE",{});var k=D(oe);ie=v(k,"renameUID"),k.forEach(f),re=v(q," - Rename a unique ID."),q.forEach(f),ue=I(l),ce=m(l,"LI",{});var T=D(ce);le=m(T,"CODE",{});var C=D(le);he=v(C,"setUID"),C.forEach(f),de=v(T," - Set the value of a unique ID."),T.forEach(f),l.forEach(f),fe=I(t),y(Ie.$$.fragment,t),me=I(t),De=m(t,"P",{});var N=D(De);ve=v(N,'You probably don\'t want to allow any UIDs from the client. Then a malicious\n    user can mess with the UID. Instead, from the server side, you can create a\n    UID when the entity is saved. You can also gate UIDs using abilities like\n    "uid/get/nameofuid", "uid/new/nameofuid", and "uid/set/nameofuid". These\n    abilities are '),ye=m(N,"STRONG",{});var xe=D(ye);Ue=v(xe,"only"),xe.forEach(f),ge=v(N," checked for client queries. If you're\n    using UIDs from Node.js and want to gate them, use the\n    "),Ee=m(N,"CODE",{});var Ye=D(Ee);we=v(Ye,"checkClientUIDPermissions"),Ye.forEach(f),pe=v(N," method on Tilmeld."),N.forEach(f),be=I(t),qe=m(t,"P",{});var Ae=D(qe);ke=v(Ae,"Caution: If a UID is incremented, and the entity you're using it on can't be\n    saved, there is no safe way to decrement the UID back to its previous value.\n    Therefore, you're advised to not use UIDs within transactions. (You can use\n    your top-level instance of Nymph to make a query outside of your\n    transaction.)"),Ae.forEach(f),t.forEach(f),Te=I(e),Ce=m(e,"SECTION",{});var Re=D(Ce);Ne=m(Re,"DIV",{class:!0});var Ve=D(Ne);je=m(Ve,"DIV",{class:!0});var He=D(je);Pe=m(He,"A",{href:!0,class:!0,style:!0});var ze=D(Pe);Se=v(ze,"Previous: Defining Entities"),ze.forEach(f),He.forEach(f),Oe=I(Ve),$e=m(Ve,"DIV",{class:!0,style:!0});var Be=D($e);Ge=m(Be,"A",{href:!0,class:!0,style:!0});var Fe=D(Ge);Le=v(Fe,"Next: Transactions"),Fe.forEach(f),Be.forEach(f),Ve.forEach(f),Re.forEach(f),this.h()},h(){document.title="UIDs - User Guide - Nymph.js",a.a=n,U(O,"font-size","3em"),g(S,"class","major"),g(Pe,"href",N+"/user-guide/defining-entities"),g(Pe,"class","button"),U(Pe,"margin",".5em"),g(je,"class","col-6 col-12-small"),g(Ge,"href",N+"/user-guide/transactions"),g(Ge,"class","button"),U(Ge,"margin",".5em"),g($e,"class","col-6 col-12-small"),U($e,"text-align","end"),g(Ne,"class","row")},m(e,s){a.m(E,document.head),w(document.head,n),p(e,j,s),p(e,P,s),w(P,S),w(S,O),w(O,$),w(P,G),w(P,L),w(L,x),w(P,Y),w(P,A),w(A,R),w(P,V),w(P,H),w(H,z),w(z,B),w(B,F),w(z,X),w(H,J),w(H,K),w(K,M),w(M,Q),w(K,W),w(H,Z),w(H,_),w(_,ee),w(ee,ae),w(_,ne),w(H,se),w(H,te),w(te,oe),w(oe,ie),w(te,re),w(H,ue),w(H,ce),w(ce,le),w(le,he),w(ce,de),w(P,fe),b(Ie,P,null),w(P,me),w(P,De),w(De,ve),w(De,ye),w(ye,Ue),w(De,ge),w(De,Ee),w(Ee,we),w(De,pe),w(P,be),w(P,qe),w(qe,ke),p(e,Te,s),p(e,Ce,s),w(Ce,Ne),w(Ne,je),w(je,Pe),w(Pe,Se),w(Ne,Oe),w(Ne,$e),w($e,Ge),w(Ge,Le),xe=!0},p:q,i(e){xe||(k(Ie.$$.fragment,e),xe=!0)},o(e){T(Ie.$$.fragment,e),xe=!1},d(e){f(n),e&&a.d(),e&&f(j),e&&f(P),C(Ie),e&&f(Te),e&&f(Ce)}}}class P extends e{constructor(e){super(),a(this,e,null,j,n,{})}}export{P as default};
