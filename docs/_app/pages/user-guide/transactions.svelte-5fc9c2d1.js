import{S as t,i as a,s as n,k as e,e as s,t as o,L as r,d as i,n as c,c as h,a as l,g as u,X as d,b as m,f as y,F as p,G as f}from"../../chunks/vendor-836b274b.js";import{b as v}from"../../chunks/paths-6758d194.js";function E(t){let a,n,E,b,g,w,N,k,I,T,C,D,x,O,S,L,P,A,j,M,W,U,F,R,V,q,G,H,Q,Y,$,z,X,B,J,K,Z,_,tt,at,nt,et,st,ot,rt,it,ct,ht,lt,ut,dt,mt,yt,pt,ft,vt,Et,bt,gt,wt,Nt,kt,It,Tt;return{c(){a=e(),n=s("section"),E=s("header"),b=s("h1"),g=o("Transactions"),w=e(),N=s("p"),k=o("In Node.js, Nymph supports nested transactions. Nothing will be permanently\n    written to the database's storage until the highest level transaction is\n    committed. When a nested transaction is rolled back, the database will be in\n    the state where the transaction above it started that nested transaction."),I=e(),T=s("p"),C=o("When you start a transaction, you give it a name, then you can commit or\n    roll back that transaction, by name. This means if you're doing transactions\n    recursively, you should use a counter in your name. Nymph uses internal\n    transactions that start with the \"nymph-\" prefix, so don't use that. You\n    should be sure to commit or rollback transactions in the reverse order that\n    they were started, or you might run into trouble."),D=e(),x=s("p"),O=s("code"),S=o("Nymph"),L=o(" has the following methods for managing transactions."),P=e(),A=s("ul"),j=s("li"),M=s("code"),W=o("startTransaction"),U=o(" - Start a named transaction."),F=e(),R=s("li"),V=s("code"),q=o("commit"),G=o(" - Commit a named transaction."),H=e(),Q=s("li"),Y=s("code"),$=o("rollback"),z=o(" - Rollback a named transaction."),X=e(),B=s("li"),J=s("code"),K=o("inTransaction"),Z=o(" - Check if Nymph is currently running within a transaction."),_=e(),tt=s("p"),at=s("code"),nt=o("startTransaction"),et=o(" will return a new instance of Nymph. For the rest\n    of the transaction, until it is committed or rolled back, you should use this\n    instance. It will be tied to a specific connection to the database."),st=e(),ot=s("p"),rt=o("When you start a new transaction, entities retrieved from that transaction's\n    Nymph instance will have that instance within their static "),it=s("code"),ct=o("nymph"),ht=o("\n    property and instance "),lt=s("code"),ut=o("$nymph"),dt=o(" property. As long as the entity code\n    always uses these instances, every query and change should occur within that\n    transaction."),mt=e(),yt=s("p"),pt=o("Not all databases that Nymph supports (namely, MySQL with an engine that\n    doesn't support transactions, like the MyISAM engine) can use transactions.\n    To ensure data consistency, it's highly recommended to use a configuration\n    that supports transactions."),ft=e(),vt=s("section"),Et=s("div"),bt=s("div"),gt=s("a"),wt=o("Previous: UIDs"),Nt=e(),kt=s("div"),It=s("a"),Tt=o("Next: Export and Import"),this.h()},l(t){r('[data-svelte="svelte-opfhcg"]',document.head).forEach(i),a=c(t),n=h(t,"SECTION",{});var e=l(n);E=h(e,"HEADER",{class:!0});var s=l(E);b=h(s,"H1",{style:!0});var o=l(b);g=u(o,"Transactions"),o.forEach(i),s.forEach(i),w=c(e),N=h(e,"P",{});var d=l(N);k=u(d,"In Node.js, Nymph supports nested transactions. Nothing will be permanently\n    written to the database's storage until the highest level transaction is\n    committed. When a nested transaction is rolled back, the database will be in\n    the state where the transaction above it started that nested transaction."),d.forEach(i),I=c(e),T=h(e,"P",{});var m=l(T);C=u(m,"When you start a transaction, you give it a name, then you can commit or\n    roll back that transaction, by name. This means if you're doing transactions\n    recursively, you should use a counter in your name. Nymph uses internal\n    transactions that start with the \"nymph-\" prefix, so don't use that. You\n    should be sure to commit or rollback transactions in the reverse order that\n    they were started, or you might run into trouble."),m.forEach(i),D=c(e),x=h(e,"P",{});var y=l(x);O=h(y,"CODE",{});var p=l(O);S=u(p,"Nymph"),p.forEach(i),L=u(y," has the following methods for managing transactions."),y.forEach(i),P=c(e),A=h(e,"UL",{});var f=l(A);j=h(f,"LI",{});var v=l(j);M=h(v,"CODE",{});var Ct=l(M);W=u(Ct,"startTransaction"),Ct.forEach(i),U=u(v," - Start a named transaction."),v.forEach(i),F=c(f),R=h(f,"LI",{});var Dt=l(R);V=h(Dt,"CODE",{});var xt=l(V);q=u(xt,"commit"),xt.forEach(i),G=u(Dt," - Commit a named transaction."),Dt.forEach(i),H=c(f),Q=h(f,"LI",{});var Ot=l(Q);Y=h(Ot,"CODE",{});var St=l(Y);$=u(St,"rollback"),St.forEach(i),z=u(Ot," - Rollback a named transaction."),Ot.forEach(i),X=c(f),B=h(f,"LI",{});var Lt=l(B);J=h(Lt,"CODE",{});var Pt=l(J);K=u(Pt,"inTransaction"),Pt.forEach(i),Z=u(Lt," - Check if Nymph is currently running within a transaction."),Lt.forEach(i),f.forEach(i),_=c(e),tt=h(e,"P",{});var At=l(tt);at=h(At,"CODE",{});var jt=l(at);nt=u(jt,"startTransaction"),jt.forEach(i),et=u(At," will return a new instance of Nymph. For the rest\n    of the transaction, until it is committed or rolled back, you should use this\n    instance. It will be tied to a specific connection to the database."),At.forEach(i),st=c(e),ot=h(e,"P",{});var Mt=l(ot);rt=u(Mt,"When you start a new transaction, entities retrieved from that transaction's\n    Nymph instance will have that instance within their static "),it=h(Mt,"CODE",{});var Wt=l(it);ct=u(Wt,"nymph"),Wt.forEach(i),ht=u(Mt,"\n    property and instance "),lt=h(Mt,"CODE",{});var Ut=l(lt);ut=u(Ut,"$nymph"),Ut.forEach(i),dt=u(Mt," property. As long as the entity code\n    always uses these instances, every query and change should occur within that\n    transaction."),Mt.forEach(i),mt=c(e),yt=h(e,"P",{});var Ft=l(yt);pt=u(Ft,"Not all databases that Nymph supports (namely, MySQL with an engine that\n    doesn't support transactions, like the MyISAM engine) can use transactions.\n    To ensure data consistency, it's highly recommended to use a configuration\n    that supports transactions."),Ft.forEach(i),e.forEach(i),ft=c(t),vt=h(t,"SECTION",{});var Rt=l(vt);Et=h(Rt,"DIV",{class:!0});var Vt=l(Et);bt=h(Vt,"DIV",{class:!0});var qt=l(bt);gt=h(qt,"A",{href:!0,class:!0,style:!0});var Gt=l(gt);wt=u(Gt,"Previous: UIDs"),Gt.forEach(i),qt.forEach(i),Nt=c(Vt),kt=h(Vt,"DIV",{class:!0,style:!0});var Ht=l(kt);It=h(Ht,"A",{href:!0,class:!0,style:!0});var Qt=l(It);Tt=u(Qt,"Next: Export and Import"),Qt.forEach(i),Ht.forEach(i),Vt.forEach(i),Rt.forEach(i),this.h()},h(){document.title="Transactions - User Guide - Nymph.js",d(b,"font-size","3em"),m(E,"class","major"),m(gt,"href",v+"/user-guide/uids"),m(gt,"class","button"),d(gt,"margin",".5em"),m(bt,"class","col-6 col-12-small"),m(It,"href",v+"/user-guide/export-and-import"),m(It,"class","button"),d(It,"margin",".5em"),m(kt,"class","col-6 col-12-small"),d(kt,"text-align","end"),m(Et,"class","row")},m(t,e){y(t,a,e),y(t,n,e),p(n,E),p(E,b),p(b,g),p(n,w),p(n,N),p(N,k),p(n,I),p(n,T),p(T,C),p(n,D),p(n,x),p(x,O),p(O,S),p(x,L),p(n,P),p(n,A),p(A,j),p(j,M),p(M,W),p(j,U),p(A,F),p(A,R),p(R,V),p(V,q),p(R,G),p(A,H),p(A,Q),p(Q,Y),p(Y,$),p(Q,z),p(A,X),p(A,B),p(B,J),p(J,K),p(B,Z),p(n,_),p(n,tt),p(tt,at),p(at,nt),p(tt,et),p(n,st),p(n,ot),p(ot,rt),p(ot,it),p(it,ct),p(ot,ht),p(ot,lt),p(lt,ut),p(ot,dt),p(n,mt),p(n,yt),p(yt,pt),y(t,ft,e),y(t,vt,e),p(vt,Et),p(Et,bt),p(bt,gt),p(gt,wt),p(Et,Nt),p(Et,kt),p(kt,It),p(It,Tt)},p:f,i:f,o:f,d(t){t&&i(a),t&&i(n),t&&i(ft),t&&i(vt)}}}class b extends t{constructor(t){super(),a(this,t,null,E,n,{})}}export{b as default};
