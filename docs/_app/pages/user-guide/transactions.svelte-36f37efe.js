import{S as a,i as t,s as n,k as s,e,t as o,L as r,d as i,n as c,c as h,a as l,g as u,X as m,b as d,f,F as p,G as y}from"../../chunks/vendor-836b274b.js";import{b as v}from"../../chunks/paths-6758d194.js";function E(a){let t,n,E,g,b,N,w,I,k,T,C,D,x,S,L,O,M,P,j,A,U,F,R,V,G,H,Q,W,Y,z,X,q,B,J,K,Z,$,_,aa,ta,na,sa,ea,oa,ra,ia,ca,ha,la,ua,ma,da;return{c(){t=s(),n=e("section"),E=e("header"),g=e("h1"),b=o("Transactions"),N=s(),w=e("p"),I=o("In Node.js, Nymph supports nested transactions. Nothing will be written to\n    the database's permanent storage until the highest level transaction is\n    committed. When you start a transaction, you give it a name, then you can\n    commit or roll back that transaction, by name. This means if you're doing\n    transactions recursively, you should use a counter in your name. Nymph uses\n    internal transactions that start with the \"nymph-\" prefix. You should be\n    sure to commit or rollback transactions in the reverse order that they were\n    started, or you might run into trouble."),k=s(),T=e("p"),C=e("code"),D=o("Nymph"),x=o(" has the following methods for managing transactions."),S=s(),L=e("ul"),O=e("li"),M=e("code"),P=o("startTransaction"),j=o(" - Start a named transaction."),A=s(),U=e("li"),F=e("code"),R=o("commit"),V=o(" - Commit a named transaction."),G=s(),H=e("li"),Q=e("code"),W=o("rollback"),Y=o(" - Rollback a named transaction."),z=s(),X=e("li"),q=e("code"),B=o("inTransaction"),J=o(" - Check if Nymph is currently running within a transaction."),K=s(),Z=e("p"),$=e("code"),_=o("startTransaction"),aa=o(" will return a new instance of Nymph. For the rest\n    of the transaction, until it is committed or rolled back, you should use this\n    instance. It will be tied to a specific connection to the database."),ta=s(),na=e("p"),sa=o("Not all databases that Nymph supports (namely, MySQL with an engine that\n    doesn't support transactions, like the MyISAM engine) can use transactions.\n    To ensure data consistency, it's highly recommended to use a configuration\n    that supports transactions."),ea=s(),oa=e("section"),ra=e("div"),ia=e("div"),ca=e("a"),ha=o("Previous: UIDs"),la=s(),ua=e("div"),ma=e("a"),da=o("Next: Exp. and Imp. Entities"),this.h()},l(a){r('[data-svelte="svelte-1wtn147"]',document.head).forEach(i),t=c(a),n=h(a,"SECTION",{});var s=l(n);E=h(s,"HEADER",{class:!0});var e=l(E);g=h(e,"H1",{style:!0});var o=l(g);b=u(o,"Transactions"),o.forEach(i),e.forEach(i),N=c(s),w=h(s,"P",{});var m=l(w);I=u(m,"In Node.js, Nymph supports nested transactions. Nothing will be written to\n    the database's permanent storage until the highest level transaction is\n    committed. When you start a transaction, you give it a name, then you can\n    commit or roll back that transaction, by name. This means if you're doing\n    transactions recursively, you should use a counter in your name. Nymph uses\n    internal transactions that start with the \"nymph-\" prefix. You should be\n    sure to commit or rollback transactions in the reverse order that they were\n    started, or you might run into trouble."),m.forEach(i),k=c(s),T=h(s,"P",{});var d=l(T);C=h(d,"CODE",{});var f=l(C);D=u(f,"Nymph"),f.forEach(i),x=u(d," has the following methods for managing transactions."),d.forEach(i),S=c(s),L=h(s,"UL",{});var p=l(L);O=h(p,"LI",{});var y=l(O);M=h(y,"CODE",{});var v=l(M);P=u(v,"startTransaction"),v.forEach(i),j=u(y," - Start a named transaction."),y.forEach(i),A=c(p),U=h(p,"LI",{});var fa=l(U);F=h(fa,"CODE",{});var pa=l(F);R=u(pa,"commit"),pa.forEach(i),V=u(fa," - Commit a named transaction."),fa.forEach(i),G=c(p),H=h(p,"LI",{});var ya=l(H);Q=h(ya,"CODE",{});var va=l(Q);W=u(va,"rollback"),va.forEach(i),Y=u(ya," - Rollback a named transaction."),ya.forEach(i),z=c(p),X=h(p,"LI",{});var Ea=l(X);q=h(Ea,"CODE",{});var ga=l(q);B=u(ga,"inTransaction"),ga.forEach(i),J=u(Ea," - Check if Nymph is currently running within a transaction."),Ea.forEach(i),p.forEach(i),K=c(s),Z=h(s,"P",{});var ba=l(Z);$=h(ba,"CODE",{});var Na=l($);_=u(Na,"startTransaction"),Na.forEach(i),aa=u(ba," will return a new instance of Nymph. For the rest\n    of the transaction, until it is committed or rolled back, you should use this\n    instance. It will be tied to a specific connection to the database."),ba.forEach(i),ta=c(s),na=h(s,"P",{});var wa=l(na);sa=u(wa,"Not all databases that Nymph supports (namely, MySQL with an engine that\n    doesn't support transactions, like the MyISAM engine) can use transactions.\n    To ensure data consistency, it's highly recommended to use a configuration\n    that supports transactions."),wa.forEach(i),s.forEach(i),ea=c(a),oa=h(a,"SECTION",{});var Ia=l(oa);ra=h(Ia,"DIV",{class:!0});var ka=l(ra);ia=h(ka,"DIV",{class:!0});var Ta=l(ia);ca=h(Ta,"A",{href:!0,class:!0,style:!0});var Ca=l(ca);ha=u(Ca,"Previous: UIDs"),Ca.forEach(i),Ta.forEach(i),la=c(ka),ua=h(ka,"DIV",{class:!0,style:!0});var Da=l(ua);ma=h(Da,"A",{href:!0,class:!0,style:!0});var xa=l(ma);da=u(xa,"Next: Exp. and Imp. Entities"),xa.forEach(i),Da.forEach(i),ka.forEach(i),Ia.forEach(i),this.h()},h(){document.title="Transactions - User Guide - Nymph",m(g,"font-size","3em"),d(E,"class","major"),d(ca,"href",v+"/user-guide/uids"),d(ca,"class","button"),m(ca,"margin",".5em"),d(ia,"class","col-6 col-12-small"),d(ma,"href",v+"/user-guide/exporting-and-importing-entities"),d(ma,"class","button"),m(ma,"margin",".5em"),d(ua,"class","col-6 col-12-small"),m(ua,"text-align","end"),d(ra,"class","row")},m(a,s){f(a,t,s),f(a,n,s),p(n,E),p(E,g),p(g,b),p(n,N),p(n,w),p(w,I),p(n,k),p(n,T),p(T,C),p(C,D),p(T,x),p(n,S),p(n,L),p(L,O),p(O,M),p(M,P),p(O,j),p(L,A),p(L,U),p(U,F),p(F,R),p(U,V),p(L,G),p(L,H),p(H,Q),p(Q,W),p(H,Y),p(L,z),p(L,X),p(X,q),p(q,B),p(X,J),p(n,K),p(n,Z),p(Z,$),p($,_),p(Z,aa),p(n,ta),p(n,na),p(na,sa),f(a,ea,s),f(a,oa,s),p(oa,ra),p(ra,ia),p(ia,ca),p(ca,ha),p(ra,la),p(ra,ua),p(ua,ma),p(ma,da)},p:y,i:y,o:y,d(a){a&&i(t),a&&i(n),a&&i(ea),a&&i(oa)}}}class g extends a{constructor(a){super(),t(this,a,null,E,n,{})}}export{g as default};
