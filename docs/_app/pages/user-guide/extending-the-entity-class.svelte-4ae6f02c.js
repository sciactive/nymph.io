import{S as e,i as a,s as t,a0 as n,a1 as s,a2 as o,l as i,k as r,e as l,t as d,j as c,L as h,a3 as u,d as y,n as p,c as f,a as m,g as v,m as g,X as E,b as T,a4 as w,F as $,f as b,o as D,G as C,x,u as N,v as I}from"../../chunks/vendor-836b274b.js";import{b as j}from"../../chunks/paths-6758d194.js";function O(e){let a,t,O,J,P,S,V,k,q,A,M,W,F,U,z,B,G,H,Y,L,R,X,_,K,Q,Z,ee,ae,te,ne,se,oe,ie,re,le,de,ce,he,ue,ye,pe,fe,me,ve,ge,Ee,Te,we,$e,be,De,Ce,xe,Ne,Ie,je,Oe,Je,Pe,Se,Ve,ke,qe,Ae,Me,We,Fe,Ue,ze,Be,Ge,He,Ye,Le,Re,Xe,_e,Ke,Qe,Ze,ea,aa,ta,na,sa,oa,ia,ra,la,da,ca,ha,ua,ya,pa,fa;return Y=new n({props:{language:s,code:"export type TodoData = {\n  name?: string;\n  done?: boolean;\n};\n\nexport class Todo extends Entity<TodoData> {\n  static ETYPE = 'todo';\n  static class = 'Todo';\n\n  protected $clientEnabledMethods = ['$archive'];\n  protected $allowlistData? = ['name', 'done'];\n  protected $protectedTags = ['archived'];\n  protected $allowlistTags? = [];\n\n  static async factory(guid?: string): Promise<Todo & TodoData> {\n    return (await super.factory(guid)) as Todo & TodoData;\n  }\n\n  static factorySync(guid?: string): Todo & TodoData {\n    return super.factorySync(guid) as Todo & TodoData;\n  }\n\n  constructor(guid?: string) {\n    super(guid);\n\n    if (this.guid == null) {\n      this.$data.name = '';\n      this.$data.done = false;\n    }\n  }\n\n  async $archive() {\n    if (this.$hasTag('archived')) {\n      return true;\n    }\n    this.$addTag('archived');\n    return await this.$save();\n  }\n\n  async $save() {\n    if (!Tilmeld.gatekeeper()) {\n      // Only allow logged in users to save.\n      throw new Error('You are not logged in.');\n    }\n    // Validate the entity's data.\n    Joi.attempt(\n      this.$getValidatable(),\n      Joi.object().keys({\n        guid: Joi.alternatives()\n          .try(\n            Joi.any().only().allow(null),\n            Joi.string().trim(false).length(24).hex()\n          )\n          .required(),\n        cdate: Joi.alternatives()\n          .try(Joi.any().only().allow(null), Joi.number())\n          .required(),\n        mdate: Joi.alternatives()\n          .try(Joi.any().only().allow(null), Joi.number())\n          .required(),\n        tags: Joi.array()\n          .items(\n            Joi.string()\n              .pattern(/[-]/, {\n                name: 'control characters',\n                invert: true\n              })\n              .min(1)\n          )\n          .required(),\n        name: Joi.string().trim(false).min(1).required(),\n        done: Joi.boolean().required()\n      }),\n      'Invalid Todo: '\n    );\n    return await super.$save();\n  }\n}\n\nNymph.setEntityClass(Todo.class, Todo);"}}),Q=new n({props:{language:s,code:"export type TodoData = {\n  name?: string;\n  done?: boolean;\n};\n\nexport class Todo extends Entity<TodoData> {\n  // The name of the server class\n  public static class = 'Todo';\n\n  constructor(guid?: string) {\n    super(guid);\n\n    if (guid == null) {\n      this.$data.name = '';\n      this.$data.done = false;\n    }\n  }\n\n  static async factory(guid?: string): Promise<Todo & TodoData> {\n    return (await super.factory(guid)) as Todo & TodoData;\n  }\n\n  static factorySync(guid?: string): Todo & TodoData {\n    return super.factorySync(guid) as Todo & TodoData;\n  }\n\n  async $archive(): Promise<boolean> {\n    return await this.$serverCall('$archive', []);\n  }\n}\n\nNymph.setEntityClass(Todo.class, Todo);"}}),{c(){a=new o,t=i(),O=r(),J=l("section"),P=l("header"),S=l("h1"),V=d("Extending the Entity Class"),k=r(),q=l("p"),A=d("To create a new type of data object in Nymph, you extend the "),M=l("code"),W=d("Entity"),F=d(" class. This is equivalent to creating a new table in a relational database.\n    If you are going to use the class on the client side, you also need to create\n    a corresponding client class. Below are two examples, one for Node.js, and one\n    for the client. A more in depth explanation follows the examples."),U=r(),z=l("div"),B=l("div"),G=d("Extending Entity in Node.js"),H=r(),c(Y.$$.fragment),L=r(),R=l("div"),X=l("div"),_=d("Extending Entity in the Client"),K=r(),c(Q.$$.fragment),Z=r(),ee=l("p"),ae=d("In both cases, defaults are set in the constructor. In this case, the "),te=l("code"),ne=d("done"),se=d("\n    property is set to false and the "),oe=l("code"),ie=d("name"),re=d(" property is set to an empty\n    string."),le=r(),de=l("p"),ce=d("In Node.js, the etype is set to "),he=l("code"),ue=d('"todo"'),ye=d(". The etype of an entity\n    determines which table(s) the entity will be placed in. When you search for\n    an entity, you give Nymph a class. Nymph will use that class' etype to\n    determine where to search for entities. If you don't provide a class, the\n    "),pe=l("code"),fe=d("Entity"),me=d(' class and the "entity" etype will be used.'),ve=r(),ge=l("p"),Ee=d("The "),Te=l("code"),we=d("$clientEnabledMethods"),$e=d(" property and the\n    "),be=l("code"),De=d("clientEnabledStaticMethods"),Ce=d("\n    static property in Node.js determine which methods and static methods can be\n    called from the client using "),xe=l("code"),Ne=d("$serverCall"),Ie=d(" and\n    "),je=l("code"),Oe=d("serverCallStatic"),Je=d(". In the client class, the\n    "),Pe=l("code"),Se=d("return await this.$serverCall('archive', []);"),Ve=d(" statement takes advantage\n    of this feature."),ke=r(),qe=l("p"),Ae=d("On each the Node.js class and the client class, the class name is set in the "),Me=l("code"),We=d("class"),Fe=d(" static property. This class name should match on each side."),Ue=r(),ze=l("p"),Be=d("Finally, in Node.js, the "),Ge=l("code"),He=d("Todo"),Ye=d(" class validates all of its data\n    in the "),Le=l("code"),Re=d("$save"),Xe=d(" method using\n    "),_e=l("a"),Ke=d("Joi"),Qe=d(". Without this validation,\n    a malicious user could send invalid data types or even megabytes worth of\n    data in an entity. Any validation library should support validation in Nymph\n    using the "),Ze=l("code"),ea=d("$getValidatable"),aa=d(" method. The\n    "),ta=l("code"),na=d("$allowlistData"),sa=d(" property will ensure no extra properties are set."),oa=r(),ia=l("section"),ra=l("div"),la=l("div"),da=l("a"),ca=d("Previous: Entity Class"),ha=r(),ua=l("div"),ya=l("a"),pa=d("Next: UIDs"),this.h()},l(e){const n=h('[data-svelte="svelte-3gzgmu"]',document.head);a=u(n),t=i(),n.forEach(y),O=p(e),J=f(e,"SECTION",{});var s=m(J);P=f(s,"HEADER",{class:!0});var o=m(P);S=f(o,"H1",{style:!0});var r=m(S);V=v(r,"Extending the Entity Class"),r.forEach(y),o.forEach(y),k=p(s),q=f(s,"P",{});var l=m(q);A=v(l,"To create a new type of data object in Nymph, you extend the "),M=f(l,"CODE",{});var d=m(M);W=v(d,"Entity"),d.forEach(y),F=v(l," class. This is equivalent to creating a new table in a relational database.\n    If you are going to use the class on the client side, you also need to create\n    a corresponding client class. Below are two examples, one for Node.js, and one\n    for the client. A more in depth explanation follows the examples."),l.forEach(y),U=p(s),z=f(s,"DIV",{});var c=m(z);B=f(c,"DIV",{style:!0});var E=m(B);G=v(E,"Extending Entity in Node.js"),E.forEach(y),H=p(c),g(Y.$$.fragment,c),c.forEach(y),L=p(s),R=f(s,"DIV",{});var T=m(R);X=f(T,"DIV",{style:!0});var w=m(X);_=v(w,"Extending Entity in the Client"),w.forEach(y),K=p(T),g(Q.$$.fragment,T),T.forEach(y),Z=p(s),ee=f(s,"P",{});var $=m(ee);ae=v($,"In both cases, defaults are set in the constructor. In this case, the "),te=f($,"CODE",{});var b=m(te);ne=v(b,"done"),b.forEach(y),se=v($,"\n    property is set to false and the "),oe=f($,"CODE",{});var D=m(oe);ie=v(D,"name"),D.forEach(y),re=v($," property is set to an empty\n    string."),$.forEach(y),le=p(s),de=f(s,"P",{});var C=m(de);ce=v(C,"In Node.js, the etype is set to "),he=f(C,"CODE",{});var x=m(he);ue=v(x,'"todo"'),x.forEach(y),ye=v(C,". The etype of an entity\n    determines which table(s) the entity will be placed in. When you search for\n    an entity, you give Nymph a class. Nymph will use that class' etype to\n    determine where to search for entities. If you don't provide a class, the\n    "),pe=f(C,"CODE",{});var N=m(pe);fe=v(N,"Entity"),N.forEach(y),me=v(C,' class and the "entity" etype will be used.'),C.forEach(y),ve=p(s),ge=f(s,"P",{});var I=m(ge);Ee=v(I,"The "),Te=f(I,"CODE",{});var j=m(Te);we=v(j,"$clientEnabledMethods"),j.forEach(y),$e=v(I," property and the\n    "),be=f(I,"CODE",{});var fa=m(be);De=v(fa,"clientEnabledStaticMethods"),fa.forEach(y),Ce=v(I,"\n    static property in Node.js determine which methods and static methods can be\n    called from the client using "),xe=f(I,"CODE",{});var ma=m(xe);Ne=v(ma,"$serverCall"),ma.forEach(y),Ie=v(I," and\n    "),je=f(I,"CODE",{});var va=m(je);Oe=v(va,"serverCallStatic"),va.forEach(y),Je=v(I,". In the client class, the\n    "),Pe=f(I,"CODE",{});var ga=m(Pe);Se=v(ga,"return await this.$serverCall('archive', []);"),ga.forEach(y),Ve=v(I," statement takes advantage\n    of this feature."),I.forEach(y),ke=p(s),qe=f(s,"P",{});var Ea=m(qe);Ae=v(Ea,"On each the Node.js class and the client class, the class name is set in the "),Me=f(Ea,"CODE",{});var Ta=m(Me);We=v(Ta,"class"),Ta.forEach(y),Fe=v(Ea," static property. This class name should match on each side."),Ea.forEach(y),Ue=p(s),ze=f(s,"P",{});var wa=m(ze);Be=v(wa,"Finally, in Node.js, the "),Ge=f(wa,"CODE",{});var $a=m(Ge);He=v($a,"Todo"),$a.forEach(y),Ye=v(wa," class validates all of its data\n    in the "),Le=f(wa,"CODE",{});var ba=m(Le);Re=v(ba,"$save"),ba.forEach(y),Xe=v(wa," method using\n    "),_e=f(wa,"A",{href:!0,target:!0});var Da=m(_e);Ke=v(Da,"Joi"),Da.forEach(y),Qe=v(wa,". Without this validation,\n    a malicious user could send invalid data types or even megabytes worth of\n    data in an entity. Any validation library should support validation in Nymph\n    using the "),Ze=f(wa,"CODE",{});var Ca=m(Ze);ea=v(Ca,"$getValidatable"),Ca.forEach(y),aa=v(wa," method. The\n    "),ta=f(wa,"CODE",{});var xa=m(ta);na=v(xa,"$allowlistData"),xa.forEach(y),sa=v(wa," property will ensure no extra properties are set."),wa.forEach(y),s.forEach(y),oa=p(e),ia=f(e,"SECTION",{});var Na=m(ia);ra=f(Na,"DIV",{class:!0});var Ia=m(ra);la=f(Ia,"DIV",{class:!0});var ja=m(la);da=f(ja,"A",{href:!0,class:!0,style:!0});var Oa=m(da);ca=v(Oa,"Previous: Entity Class"),Oa.forEach(y),ja.forEach(y),ha=p(Ia),ua=f(Ia,"DIV",{class:!0,style:!0});var Ja=m(ua);ya=f(Ja,"A",{href:!0,class:!0,style:!0});var Pa=m(ya);pa=v(Pa,"Next: UIDs"),Pa.forEach(y),Ja.forEach(y),Ia.forEach(y),Na.forEach(y),this.h()},h(){document.title="Extending the Entity Class - User Guide - Nymph",a.a=t,E(S,"font-size","3em"),T(P,"class","major"),E(B,"text-align","end"),E(X,"text-align","end"),T(_e,"href","https://joi.dev/"),T(_e,"target","_blank"),T(da,"href",j+"/user-guide/entity-class"),T(da,"class","button"),E(da,"margin",".5em"),T(la,"class","col-6 col-12-small"),T(ya,"href",j+"/user-guide/uids"),T(ya,"class","button"),E(ya,"margin",".5em"),T(ua,"class","col-6 col-12-small"),E(ua,"text-align","end"),T(ra,"class","row")},m(e,n){a.m(w,document.head),$(document.head,t),b(e,O,n),b(e,J,n),$(J,P),$(P,S),$(S,V),$(J,k),$(J,q),$(q,A),$(q,M),$(M,W),$(q,F),$(J,U),$(J,z),$(z,B),$(B,G),$(z,H),D(Y,z,null),$(J,L),$(J,R),$(R,X),$(X,_),$(R,K),D(Q,R,null),$(J,Z),$(J,ee),$(ee,ae),$(ee,te),$(te,ne),$(ee,se),$(ee,oe),$(oe,ie),$(ee,re),$(J,le),$(J,de),$(de,ce),$(de,he),$(he,ue),$(de,ye),$(de,pe),$(pe,fe),$(de,me),$(J,ve),$(J,ge),$(ge,Ee),$(ge,Te),$(Te,we),$(ge,$e),$(ge,be),$(be,De),$(ge,Ce),$(ge,xe),$(xe,Ne),$(ge,Ie),$(ge,je),$(je,Oe),$(ge,Je),$(ge,Pe),$(Pe,Se),$(ge,Ve),$(J,ke),$(J,qe),$(qe,Ae),$(qe,Me),$(Me,We),$(qe,Fe),$(J,Ue),$(J,ze),$(ze,Be),$(ze,Ge),$(Ge,He),$(ze,Ye),$(ze,Le),$(Le,Re),$(ze,Xe),$(ze,_e),$(_e,Ke),$(ze,Qe),$(ze,Ze),$(Ze,ea),$(ze,aa),$(ze,ta),$(ta,na),$(ze,sa),b(e,oa,n),b(e,ia,n),$(ia,ra),$(ra,la),$(la,da),$(da,ca),$(ra,ha),$(ra,ua),$(ua,ya),$(ya,pa),fa=!0},p:C,i(e){fa||(x(Y.$$.fragment,e),x(Q.$$.fragment,e),fa=!0)},o(e){N(Y.$$.fragment,e),N(Q.$$.fragment,e),fa=!1},d(e){y(t),e&&a.d(),e&&y(O),e&&y(J),I(Y),I(Q),e&&y(oa),e&&y(ia)}}}class J extends e{constructor(e){super(),a(this,e,null,O,t,{})}}export{J as default};
