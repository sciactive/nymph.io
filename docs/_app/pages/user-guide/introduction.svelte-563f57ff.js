import{S as e,i as a,s as n,k as t,e as s,t as i,L as r,d as o,n as h,c,a as l,g as d,X as y,b as p,f as u,F as f,G as m}from"../../chunks/vendor-836b274b.js";import{b as v}from"../../chunks/paths-6758d194.js";function g(e){let a,n,g,b,w,E,N,I,P,D,j,A,T,U,S,k,H,G,x,C,O,q,R,W,$,J,Y,L,V,X,B,M,z,F,_,K,Q,Z,ee,ae,ne,te,se,ie,re,oe,he,ce,le,de,ye,pe,ue,fe,me,ve,ge,be,we,Ee,Ne,Ie,Pe,De,je,Ae,Te,Ue,Se,ke,He,Ge,xe,Ce,Oe;return{c(){a=t(),n=s("section"),g=s("header"),b=s("h1"),w=i("Introduction"),E=t(),N=s("p"),I=i("Nymph is an ORM for Node.js and the browser, written in TypeScript. Nymph\n    data objects, called entities, are accessed just like plain objects. Nymph\n    includes a REST server and a Publish/Subscribe server. It used to be a PHP\n    library and was migrated to Node.js in 2021."),P=t(),D=s("header"),j=s("h2"),A=i("Understanding Nymph Applications"),T=t(),U=s("p"),S=i("Data in Nymph is stored and manipulated in objects called "),k=s("strong"),H=i("entities"),G=i(". Entities can hold most types of data available in JavaScript, including\n    other entities. Entities are not strictly structured, so data of any type\n    can be added and saved just by assigning a property on the entity and\n    calling "),x=s("code"),C=i("$save"),O=i(". This makes data manipulation and rapid\n    prototyping in Nymph very easy. Then when you're ready to launch to\n    production, you would use a validation library to enforce a schema for your\n    entities.\n    "),q=s("a"),R=i("Joi"),W=i("\n    is a good one. You can do this in the\n    "),$=s("code"),J=i("$save"),Y=i("\n    method on your entities before calling\n    "),L=s("code"),V=i("return await super.$save();"),X=i(". This means that during\n    development, you don't need to worry about managing schemas at all, but you\n    still get the benefit of strictly typed data checks in production."),B=t(),M=s("p"),z=i("All entities are given a globally unique identifier (GUID), which is a\n    random, cryptographically secure, 12 byte integer, encoded in a 24\n    character, lowercase HEX string. Since these are generated randomly, and\n    quite large, there should never be any two entities in any Nymph\n    installation with the same GUIDs (unless that's done on purpose). Nymph also\n    provides UIDs, which are sequential and can be used to number entities (or\n    anything else). UIDs can be used to provide a more visibly pleasing\n    identifier for entities."),F=t(),_=s("p"),K=i("Using Nymph, nearly all of an app's business logic can be written on either\n    the client side or the server side, since you interact with data the same\n    way in each. Anything that relies on access control can be handled on the\n    server side where Tilmeld, Nymph's optional user/group and access control\n    manager, provides security."),Q=t(),Z=s("p"),ee=i("If an entity is referenced in another entity's property, the class is saved\n    along with the GUID. When this property is accessed after the top level\n    entity is pulled from the DB, Nymph will retrieve the referenced entity\n    using the saved class."),ae=t(),ne=s("p"),te=i('When an entity containing a referenced entity is pulled from the database,\n    the referenced entity will exist in the data as a "sleeping reference".\n    Sleeping references have the right class and know their GUID, but other data\n    is not accessible until its pulled from the database. In Node.js, this\n    happens automatically when the data is accessed. In the client, this happens\n    when you use the '),se=s("code"),ie=i("$ready"),re=i(" method."),oe=t(),he=s("p"),ce=i("When querying entities with Nymph, the ETYPE constant on the class\n    determines which database table(s) Nymph will look in."),le=t(),de=s("p"),ye=i("Caution: When changing an entity's class name, any entities referencing it\n    must be resaved after setting the reference again using the new class name."),pe=t(),ue=s("header"),fe=s("h2"),me=i("API Docs"),ve=t(),ge=s("p"),be=i("If you want to really dive deep into Nymph, you can also browse the "),we=s("a"),Ee=i("API docs"),Ne=i(", which covers every part of Nymph's API."),Ie=t(),Pe=s("p"),De=i("If you need help with the old version of Nymph, that ran on PHP, you can\n    browse the "),je=s("a"),Ae=i("Legacy API docs"),Te=i("."),Ue=t(),Se=s("section"),ke=s("div"),He=s("div"),Ge=t(),xe=s("div"),Ce=s("a"),Oe=i("Next: Creating Entities"),this.h()},l(e){r('[data-svelte="svelte-i03alo"]',document.head).forEach(o),a=h(e),n=c(e,"SECTION",{});var t=l(n);g=c(t,"HEADER",{class:!0});var s=l(g);b=c(s,"H1",{style:!0});var i=l(b);w=d(i,"Introduction"),i.forEach(o),s.forEach(o),E=h(t),N=c(t,"P",{});var y=l(N);I=d(y,"Nymph is an ORM for Node.js and the browser, written in TypeScript. Nymph\n    data objects, called entities, are accessed just like plain objects. Nymph\n    includes a REST server and a Publish/Subscribe server. It used to be a PHP\n    library and was migrated to Node.js in 2021."),y.forEach(o),P=h(t),D=c(t,"HEADER",{class:!0});var p=l(D);j=c(p,"H2",{});var u=l(j);A=d(u,"Understanding Nymph Applications"),u.forEach(o),p.forEach(o),T=h(t),U=c(t,"P",{});var f=l(U);S=d(f,"Data in Nymph is stored and manipulated in objects called "),k=c(f,"STRONG",{});var m=l(k);H=d(m,"entities"),m.forEach(o),G=d(f,". Entities can hold most types of data available in JavaScript, including\n    other entities. Entities are not strictly structured, so data of any type\n    can be added and saved just by assigning a property on the entity and\n    calling "),x=c(f,"CODE",{});var v=l(x);C=d(v,"$save"),v.forEach(o),O=d(f,". This makes data manipulation and rapid\n    prototyping in Nymph very easy. Then when you're ready to launch to\n    production, you would use a validation library to enforce a schema for your\n    entities.\n    "),q=c(f,"A",{href:!0,target:!0});var qe=l(q);R=d(qe,"Joi"),qe.forEach(o),W=d(f,"\n    is a good one. You can do this in the\n    "),$=c(f,"CODE",{});var Re=l($);J=d(Re,"$save"),Re.forEach(o),Y=d(f,"\n    method on your entities before calling\n    "),L=c(f,"CODE",{});var We=l(L);V=d(We,"return await super.$save();"),We.forEach(o),X=d(f,". This means that during\n    development, you don't need to worry about managing schemas at all, but you\n    still get the benefit of strictly typed data checks in production."),f.forEach(o),B=h(t),M=c(t,"P",{});var $e=l(M);z=d($e,"All entities are given a globally unique identifier (GUID), which is a\n    random, cryptographically secure, 12 byte integer, encoded in a 24\n    character, lowercase HEX string. Since these are generated randomly, and\n    quite large, there should never be any two entities in any Nymph\n    installation with the same GUIDs (unless that's done on purpose). Nymph also\n    provides UIDs, which are sequential and can be used to number entities (or\n    anything else). UIDs can be used to provide a more visibly pleasing\n    identifier for entities."),$e.forEach(o),F=h(t),_=c(t,"P",{});var Je=l(_);K=d(Je,"Using Nymph, nearly all of an app's business logic can be written on either\n    the client side or the server side, since you interact with data the same\n    way in each. Anything that relies on access control can be handled on the\n    server side where Tilmeld, Nymph's optional user/group and access control\n    manager, provides security."),Je.forEach(o),Q=h(t),Z=c(t,"P",{});var Ye=l(Z);ee=d(Ye,"If an entity is referenced in another entity's property, the class is saved\n    along with the GUID. When this property is accessed after the top level\n    entity is pulled from the DB, Nymph will retrieve the referenced entity\n    using the saved class."),Ye.forEach(o),ae=h(t),ne=c(t,"P",{});var Le=l(ne);te=d(Le,'When an entity containing a referenced entity is pulled from the database,\n    the referenced entity will exist in the data as a "sleeping reference".\n    Sleeping references have the right class and know their GUID, but other data\n    is not accessible until its pulled from the database. In Node.js, this\n    happens automatically when the data is accessed. In the client, this happens\n    when you use the '),se=c(Le,"CODE",{});var Ve=l(se);ie=d(Ve,"$ready"),Ve.forEach(o),re=d(Le," method."),Le.forEach(o),oe=h(t),he=c(t,"P",{});var Xe=l(he);ce=d(Xe,"When querying entities with Nymph, the ETYPE constant on the class\n    determines which database table(s) Nymph will look in."),Xe.forEach(o),le=h(t),de=c(t,"P",{});var Be=l(de);ye=d(Be,"Caution: When changing an entity's class name, any entities referencing it\n    must be resaved after setting the reference again using the new class name."),Be.forEach(o),pe=h(t),ue=c(t,"HEADER",{class:!0});var Me=l(ue);fe=c(Me,"H2",{});var ze=l(fe);me=d(ze,"API Docs"),ze.forEach(o),Me.forEach(o),ve=h(t),ge=c(t,"P",{});var Fe=l(ge);be=d(Fe,"If you want to really dive deep into Nymph, you can also browse the "),we=c(Fe,"A",{href:!0,rel:!0});var _e=l(we);Ee=d(_e,"API docs"),_e.forEach(o),Ne=d(Fe,", which covers every part of Nymph's API."),Fe.forEach(o),Ie=h(t),Pe=c(t,"P",{});var Ke=l(Pe);De=d(Ke,"If you need help with the old version of Nymph, that ran on PHP, you can\n    browse the "),je=c(Ke,"A",{href:!0,rel:!0});var Qe=l(je);Ae=d(Qe,"Legacy API docs"),Qe.forEach(o),Te=d(Ke,"."),Ke.forEach(o),t.forEach(o),Ue=h(e),Se=c(e,"SECTION",{});var Ze=l(Se);ke=c(Ze,"DIV",{class:!0});var ea=l(ke);He=c(ea,"DIV",{class:!0}),l(He).forEach(o),Ge=h(ea),xe=c(ea,"DIV",{class:!0,style:!0});var aa=l(xe);Ce=c(aa,"A",{href:!0,class:!0,style:!0});var na=l(Ce);Oe=d(na,"Next: Creating Entities"),na.forEach(o),aa.forEach(o),ea.forEach(o),Ze.forEach(o),this.h()},h(){document.title="Introduction - User Guide - Nymph",y(b,"font-size","3em"),p(g,"class","major"),p(D,"class","major"),p(q,"href","https://joi.dev/"),p(q,"target","_blank"),p(ue,"class","major"),p(we,"href","/api/latest"),p(we,"rel","external"),p(je,"href","/api/legacy/3.0.0/index.html"),p(je,"rel","external"),p(He,"class","col-6 col-12-small"),p(Ce,"href",v+"/user-guide/creating-entities"),p(Ce,"class","button"),y(Ce,"margin",".5em"),p(xe,"class","col-6 col-12-small"),y(xe,"text-align","end"),p(ke,"class","row")},m(e,t){u(e,a,t),u(e,n,t),f(n,g),f(g,b),f(b,w),f(n,E),f(n,N),f(N,I),f(n,P),f(n,D),f(D,j),f(j,A),f(n,T),f(n,U),f(U,S),f(U,k),f(k,H),f(U,G),f(U,x),f(x,C),f(U,O),f(U,q),f(q,R),f(U,W),f(U,$),f($,J),f(U,Y),f(U,L),f(L,V),f(U,X),f(n,B),f(n,M),f(M,z),f(n,F),f(n,_),f(_,K),f(n,Q),f(n,Z),f(Z,ee),f(n,ae),f(n,ne),f(ne,te),f(ne,se),f(se,ie),f(ne,re),f(n,oe),f(n,he),f(he,ce),f(n,le),f(n,de),f(de,ye),f(n,pe),f(n,ue),f(ue,fe),f(fe,me),f(n,ve),f(n,ge),f(ge,be),f(ge,we),f(we,Ee),f(ge,Ne),f(n,Ie),f(n,Pe),f(Pe,De),f(Pe,je),f(je,Ae),f(Pe,Te),u(e,Ue,t),u(e,Se,t),f(Se,ke),f(ke,He),f(ke,Ge),f(ke,xe),f(xe,Ce),f(Ce,Oe)},p:m,i:m,o:m,d(e){e&&o(a),e&&o(n),e&&o(Ue),e&&o(Se)}}}class b extends e{constructor(e){super(),a(this,e,null,g,n,{})}}export{b as default};
