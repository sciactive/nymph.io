import{S as ee,i as ae,s as ne,a as h,k as a,q as o,E as se,h as e,c as d,l as n,m as s,r,p as $,n as E,b as z,C as t,B as Lt}from"../../../../chunks/index-8e853c83.js";import{b as Zt}from"../../../../chunks/paths-b4419565.js";function oe(te){let b,i,w,g,B,G,P,J,K,A,X,Z,N,L,tt,et,at,u,I,M,nt,st,ot,k,W,rt,it,ct,C,j,lt,ht,dt,T,q,ut,mt,pt,D,U,yt,ft,vt,m,Et,R,_t,bt,V,wt,gt,Nt,F,It,Q,x,p,O,y,kt,Ct,_,f,Tt;return{c(){b=h(),i=a("section"),w=a("header"),g=a("h1"),B=o("Transactions"),G=h(),P=a("p"),J=o(`In Node.js, Nymph supports nested transactions. Nothing will be permanently
    written to the database's storage until the highest level transaction is
    committed. When a nested transaction is rolled back, the database will be in
    the state where the transaction above it started that nested transaction.`),K=h(),A=a("p"),X=o(`When you start a transaction, you give it a name, then you can commit or
    roll back that transaction, by name. This means if you're doing transactions
    recursively, you should use a counter in your name. Nymph uses internal
    transactions that start with the "nymph-" prefix, so don't use that. You
    should be sure to commit or rollback transactions in the reverse order that
    they were started, or you might run into trouble.`),Z=h(),N=a("p"),L=a("code"),tt=o("Nymph"),et=o(" has the following methods for managing transactions."),at=h(),u=a("ul"),I=a("li"),M=a("code"),nt=o("startTransaction"),st=o(" - Start a named transaction."),ot=h(),k=a("li"),W=a("code"),rt=o("commit"),it=o(" - Commit a named transaction."),ct=h(),C=a("li"),j=a("code"),lt=o("rollback"),ht=o(" - Rollback a named transaction."),dt=h(),T=a("li"),q=a("code"),ut=o("inTransaction"),mt=o(" - Check if Nymph is currently running within a transaction."),pt=h(),D=a("p"),U=a("code"),yt=o("startTransaction"),ft=o(` will return a new instance of Nymph. For the rest
    of the transaction, until it is committed or rolled back, you should use this
    instance. It will be tied to a specific connection to the database.`),vt=h(),m=a("p"),Et=o(`When you start a new transaction, entities retrieved from that transaction's
    Nymph instance will have that instance within their static `),R=a("code"),_t=o("nymph"),bt=o(`
    property and instance `),V=a("code"),wt=o("$nymph"),gt=o(` property. As long as the entity code
    always uses these instances, every query and change should occur within that
    transaction.`),Nt=h(),F=a("p"),It=o(`Not all databases that Nymph supports (namely, MySQL with an engine that
    doesn't support transactions, like the MyISAM engine) can use transactions.
    To ensure data consistency, it's highly recommended to use a configuration
    that supports transactions.`),Q=h(),x=a("section"),p=a("div"),O=a("div"),y=a("a"),kt=o("Previous: UIDs"),Ct=h(),_=a("div"),f=a("a"),Tt=o("Next: Export and Import"),this.h()},l(l){se("svelte-opfhcg",document.head).forEach(e),b=d(l),i=n(l,"SECTION",{});var c=s(i);w=n(c,"HEADER",{class:!0});var Mt=s(w);g=n(Mt,"H1",{style:!0});var Wt=s(g);B=r(Wt,"Transactions"),Wt.forEach(e),Mt.forEach(e),G=d(c),P=n(c,"P",{});var jt=s(P);J=r(jt,`In Node.js, Nymph supports nested transactions. Nothing will be permanently
    written to the database's storage until the highest level transaction is
    committed. When a nested transaction is rolled back, the database will be in
    the state where the transaction above it started that nested transaction.`),jt.forEach(e),K=d(c),A=n(c,"P",{});var qt=s(A);X=r(qt,`When you start a transaction, you give it a name, then you can commit or
    roll back that transaction, by name. This means if you're doing transactions
    recursively, you should use a counter in your name. Nymph uses internal
    transactions that start with the "nymph-" prefix, so don't use that. You
    should be sure to commit or rollback transactions in the reverse order that
    they were started, or you might run into trouble.`),qt.forEach(e),Z=d(c),N=n(c,"P",{});var Dt=s(N);L=n(Dt,"CODE",{});var Ut=s(L);tt=r(Ut,"Nymph"),Ut.forEach(e),et=r(Dt," has the following methods for managing transactions."),Dt.forEach(e),at=d(c),u=n(c,"UL",{});var v=s(u);I=n(v,"LI",{});var xt=s(I);M=n(xt,"CODE",{});var Rt=s(M);nt=r(Rt,"startTransaction"),Rt.forEach(e),st=r(xt," - Start a named transaction."),xt.forEach(e),ot=d(v),k=n(v,"LI",{});var Ot=s(k);W=n(Ot,"CODE",{});var Vt=s(W);rt=r(Vt,"commit"),Vt.forEach(e),it=r(Ot," - Commit a named transaction."),Ot.forEach(e),ct=d(v),C=n(v,"LI",{});var St=s(C);j=n(St,"CODE",{});var Ft=s(j);lt=r(Ft,"rollback"),Ft.forEach(e),ht=r(St," - Rollback a named transaction."),St.forEach(e),dt=d(v),T=n(v,"LI",{});var Pt=s(T);q=n(Pt,"CODE",{});var Ht=s(q);ut=r(Ht,"inTransaction"),Ht.forEach(e),mt=r(Pt," - Check if Nymph is currently running within a transaction."),Pt.forEach(e),v.forEach(e),pt=d(c),D=n(c,"P",{});var At=s(D);U=n(At,"CODE",{});var Qt=s(U);yt=r(Qt,"startTransaction"),Qt.forEach(e),ft=r(At,` will return a new instance of Nymph. For the rest
    of the transaction, until it is committed or rolled back, you should use this
    instance. It will be tied to a specific connection to the database.`),At.forEach(e),vt=d(c),m=n(c,"P",{});var S=s(m);Et=r(S,`When you start a new transaction, entities retrieved from that transaction's
    Nymph instance will have that instance within their static `),R=n(S,"CODE",{});var Yt=s(R);_t=r(Yt,"nymph"),Yt.forEach(e),bt=r(S,`
    property and instance `),V=n(S,"CODE",{});var $t=s(V);wt=r($t,"$nymph"),$t.forEach(e),gt=r(S,` property. As long as the entity code
    always uses these instances, every query and change should occur within that
    transaction.`),S.forEach(e),Nt=d(c),F=n(c,"P",{});var zt=s(F);It=r(zt,`Not all databases that Nymph supports (namely, MySQL with an engine that
    doesn't support transactions, like the MyISAM engine) can use transactions.
    To ensure data consistency, it's highly recommended to use a configuration
    that supports transactions.`),zt.forEach(e),c.forEach(e),Q=d(l),x=n(l,"SECTION",{});var Bt=s(x);p=n(Bt,"DIV",{class:!0});var Y=s(p);O=n(Y,"DIV",{class:!0});var Gt=s(O);y=n(Gt,"A",{href:!0,class:!0,style:!0});var Jt=s(y);kt=r(Jt,"Previous: UIDs"),Jt.forEach(e),Gt.forEach(e),Ct=d(Y),_=n(Y,"DIV",{class:!0,style:!0});var Kt=s(_);f=n(Kt,"A",{href:!0,class:!0,style:!0});var Xt=s(f);Tt=r(Xt,"Next: Export and Import"),Xt.forEach(e),Kt.forEach(e),Y.forEach(e),Bt.forEach(e),this.h()},h(){document.title="Transactions - User Guide - Nymph.js",$(g,"font-size","3em"),E(w,"class","major"),E(y,"href",Zt+"/user-guide/uids"),E(y,"class","button"),$(y,"margin",".5em"),E(O,"class","col-6 col-12-small"),E(f,"href",Zt+"/user-guide/export-and-import"),E(f,"class","button"),$(f,"margin",".5em"),E(_,"class","col-6 col-12-small"),$(_,"text-align","end"),E(p,"class","row")},m(l,H){z(l,b,H),z(l,i,H),t(i,w),t(w,g),t(g,B),t(i,G),t(i,P),t(P,J),t(i,K),t(i,A),t(A,X),t(i,Z),t(i,N),t(N,L),t(L,tt),t(N,et),t(i,at),t(i,u),t(u,I),t(I,M),t(M,nt),t(I,st),t(u,ot),t(u,k),t(k,W),t(W,rt),t(k,it),t(u,ct),t(u,C),t(C,j),t(j,lt),t(C,ht),t(u,dt),t(u,T),t(T,q),t(q,ut),t(T,mt),t(i,pt),t(i,D),t(D,U),t(U,yt),t(D,ft),t(i,vt),t(i,m),t(m,Et),t(m,R),t(R,_t),t(m,bt),t(m,V),t(V,wt),t(m,gt),t(i,Nt),t(i,F),t(F,It),z(l,Q,H),z(l,x,H),t(x,p),t(p,O),t(O,y),t(y,kt),t(p,Ct),t(p,_),t(_,f),t(f,Tt)},p:Lt,i:Lt,o:Lt,d(l){l&&e(b),l&&e(i),l&&e(Q),l&&e(x)}}}class ce extends ee{constructor(b){super(),ae(this,b,null,oe,ne,{})}}export{ce as default};
